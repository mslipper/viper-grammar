# Generated from vipergrammar/grammar/Viper.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3`")
        buf.write("\u0429\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\3\2\3\2\3\2\3\2\3\2\5\2\u00b2\n\2\3\3\3\3\7\3\u00b6")
        buf.write("\n\3\f\3\16\3\u00b9\13\3\3\3\3\3\3\4\3\4\7\4\u00bf\n\4")
        buf.write("\f\4\16\4\u00c2\13\4\3\4\3\4\3\5\3\5\3\5\3\5\5\5\u00ca")
        buf.write("\n\5\3\5\5\5\u00cd\n\5\3\5\3\5\3\6\6\6\u00d2\n\6\r\6\16")
        buf.write("\6\u00d3\3\7\3\7\3\7\5\7\u00d9\n\7\3\b\3\b\3\b\3\b\3\b")
        buf.write("\5\b\u00e0\n\b\3\b\3\b\3\b\3\t\3\t\5\t\u00e7\n\t\3\t\3")
        buf.write("\t\3\n\3\n\3\n\5\n\u00ee\n\n\3\n\3\n\3\n\3\n\5\n\u00f4")
        buf.write("\n\n\7\n\u00f6\n\n\f\n\16\n\u00f9\13\n\3\n\3\n\3\n\5\n")
        buf.write("\u00fe\n\n\3\n\3\n\3\n\3\n\5\n\u0104\n\n\7\n\u0106\n\n")
        buf.write("\f\n\16\n\u0109\13\n\3\n\3\n\3\n\5\n\u010e\n\n\3\n\3\n")
        buf.write("\5\n\u0112\n\n\5\n\u0114\n\n\3\n\3\n\5\n\u0118\n\n\3\n")
        buf.write("\3\n\3\n\3\n\5\n\u011e\n\n\7\n\u0120\n\n\f\n\16\n\u0123")
        buf.write("\13\n\3\n\3\n\3\n\5\n\u0128\n\n\3\n\3\n\5\n\u012c\n\n")
        buf.write("\3\13\3\13\3\13\5\13\u0131\n\13\3\f\3\f\3\f\5\f\u0136")
        buf.write("\n\f\3\f\3\f\3\f\3\f\5\f\u013c\n\f\7\f\u013e\n\f\f\f\16")
        buf.write("\f\u0141\13\f\3\f\3\f\3\f\5\f\u0146\n\f\3\f\3\f\3\f\3")
        buf.write("\f\5\f\u014c\n\f\7\f\u014e\n\f\f\f\16\f\u0151\13\f\3\f")
        buf.write("\3\f\3\f\5\f\u0156\n\f\3\f\3\f\5\f\u015a\n\f\5\f\u015c")
        buf.write("\n\f\3\f\3\f\5\f\u0160\n\f\3\f\3\f\3\f\3\f\5\f\u0166\n")
        buf.write("\f\7\f\u0168\n\f\f\f\16\f\u016b\13\f\3\f\3\f\3\f\5\f\u0170")
        buf.write("\n\f\3\f\3\f\5\f\u0174\n\f\3\r\3\r\3\16\3\16\5\16\u017a")
        buf.write("\n\16\3\17\3\17\3\17\7\17\u017f\n\17\f\17\16\17\u0182")
        buf.write("\13\17\3\17\5\17\u0185\n\17\3\17\3\17\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\5\20\u0192\n\20\3\21\3\21")
        buf.write("\3\21\3\21\5\21\u0198\n\21\3\21\3\21\3\21\5\21\u019d\n")
        buf.write("\21\7\21\u019f\n\21\f\21\16\21\u01a2\13\21\5\21\u01a4")
        buf.write("\n\21\3\22\3\22\5\22\u01a8\n\22\3\22\3\22\3\22\5\22\u01ad")
        buf.write("\n\22\7\22\u01af\n\22\f\22\16\22\u01b2\13\22\3\22\5\22")
        buf.write("\u01b5\n\22\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\26\3")
        buf.write("\26\3\26\3\26\3\26\5\26\u01c3\n\26\3\27\3\27\3\30\3\30")
        buf.write("\3\31\3\31\5\31\u01cb\n\31\3\32\3\32\3\33\3\33\3\33\3")
        buf.write("\33\5\33\u01d3\n\33\5\33\u01d5\n\33\3\34\3\34\5\34\u01d9")
        buf.write("\n\34\3\35\3\35\3\35\3\36\3\36\7\36\u01e0\n\36\f\36\16")
        buf.write("\36\u01e3\13\36\3\36\3\36\6\36\u01e7\n\36\r\36\16\36\u01e8")
        buf.write("\5\36\u01eb\n\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5")
        buf.write("\36\u01f4\n\36\3\37\3\37\3\37\5\37\u01f9\n\37\3 \3 \3")
        buf.write(" \5 \u01fe\n \3!\3!\3!\7!\u0203\n!\f!\16!\u0206\13!\3")
        buf.write("!\5!\u0209\n!\3\"\3\"\3\"\7\"\u020e\n\"\f\"\16\"\u0211")
        buf.write("\13\"\3#\3#\3#\7#\u0216\n#\f#\16#\u0219\13#\3$\3$\3$\3")
        buf.write("$\7$\u021f\n$\f$\16$\u0222\13$\3%\3%\3%\3%\3&\3&\3&\3")
        buf.write("&\7&\u022c\n&\f&\16&\u022f\13&\3\'\3\'\3\'\3\'\5\'\u0235")
        buf.write("\n\'\3(\3(\3(\3(\3(\3(\3(\3(\5(\u023f\n(\3)\3)\3)\3)\3")
        buf.write(")\3)\3)\3)\3)\7)\u024a\n)\f)\16)\u024d\13)\3)\3)\3)\5")
        buf.write(")\u0252\n)\3*\3*\3*\3*\3*\3*\3*\5*\u025b\n*\3+\3+\3+\3")
        buf.write("+\3+\3+\3+\3+\3+\5+\u0266\n+\3,\3,\3,\3,\3,\3,\3,\6,\u026f")
        buf.write("\n,\r,\16,\u0270\3,\3,\3,\5,\u0276\n,\3,\3,\3,\5,\u027b")
        buf.write("\n,\3,\3,\3,\5,\u0280\n,\3-\3-\3-\3-\7-\u0286\n-\f-\16")
        buf.write("-\u0289\13-\3-\3-\3-\3.\3.\3.\5.\u0291\n.\3/\3/\3/\3/")
        buf.write("\5/\u0297\n/\5/\u0299\n/\3\60\3\60\3\60\3\60\6\60\u029f")
        buf.write("\n\60\r\60\16\60\u02a0\3\60\3\60\5\60\u02a5\n\60\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\5\61\u02ad\n\61\3\61\5\61\u02b0")
        buf.write("\n\61\3\62\3\62\5\62\u02b4\n\62\3\63\3\63\5\63\u02b8\n")
        buf.write("\63\3\63\3\63\3\63\3\64\3\64\5\64\u02bf\n\64\3\64\3\64")
        buf.write("\3\64\3\65\3\65\3\65\7\65\u02c7\n\65\f\65\16\65\u02ca")
        buf.write("\13\65\3\66\3\66\3\66\7\66\u02cf\n\66\f\66\16\66\u02d2")
        buf.write("\13\66\3\67\3\67\3\67\5\67\u02d7\n\67\38\38\38\38\78\u02dd")
        buf.write("\n8\f8\168\u02e0\138\39\39\39\39\39\39\39\39\39\39\39")
        buf.write("\39\39\59\u02ef\n9\3:\5:\u02f2\n:\3:\3:\3;\3;\3;\7;\u02f9")
        buf.write("\n;\f;\16;\u02fc\13;\3<\3<\3<\7<\u0301\n<\f<\16<\u0304")
        buf.write("\13<\3=\3=\3=\7=\u0309\n=\f=\16=\u030c\13=\3>\3>\3>\3")
        buf.write(">\3>\7>\u0313\n>\f>\16>\u0316\13>\3?\3?\3?\3?\3?\7?\u031d")
        buf.write("\n?\f?\16?\u0320\13?\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@")
        buf.write("\7@\u032d\n@\f@\16@\u0330\13@\3A\3A\3A\3A\3A\3A\3A\5A")
        buf.write("\u0339\nA\3B\3B\7B\u033d\nB\fB\16B\u0340\13B\3B\3B\5B")
        buf.write("\u0344\nB\3C\3C\3C\5C\u0349\nC\3C\3C\3C\5C\u034e\nC\3")
        buf.write("C\3C\3C\5C\u0353\nC\3C\3C\3C\3C\6C\u0359\nC\rC\16C\u035a")
        buf.write("\3C\3C\3C\3C\5C\u0361\nC\3D\3D\3D\3D\7D\u0367\nD\fD\16")
        buf.write("D\u036a\13D\3D\5D\u036d\nD\5D\u036f\nD\3E\3E\5E\u0373")
        buf.write("\nE\3E\3E\3E\3E\3E\3E\3E\5E\u037c\nE\3F\3F\3F\7F\u0381")
        buf.write("\nF\fF\16F\u0384\13F\3F\5F\u0387\nF\3G\3G\5G\u038b\nG")
        buf.write("\3G\3G\5G\u038f\nG\3G\5G\u0392\nG\5G\u0394\nG\3H\3H\5")
        buf.write("H\u0398\nH\3I\3I\3I\7I\u039d\nI\fI\16I\u03a0\13I\3I\5")
        buf.write("I\u03a3\nI\3J\3J\3J\7J\u03a8\nJ\fJ\16J\u03ab\13J\3J\5")
        buf.write("J\u03ae\nJ\3K\3K\3K\3K\3K\3K\3K\3K\3K\7K\u03b9\nK\fK\16")
        buf.write("K\u03bc\13K\3K\5K\u03bf\nK\5K\u03c1\nK\3K\3K\3K\3K\7K")
        buf.write("\u03c7\nK\fK\16K\u03ca\13K\3K\5K\u03cd\nK\5K\u03cf\nK")
        buf.write("\5K\u03d1\nK\3L\3L\3L\3L\5L\u03d7\nL\3L\5L\u03da\nL\3")
        buf.write("L\3L\3L\3M\3M\3M\7M\u03e2\nM\fM\16M\u03e5\13M\3M\3M\5")
        buf.write("M\u03e9\nM\3M\3M\3M\3M\7M\u03ef\nM\fM\16M\u03f2\13M\3")
        buf.write("M\3M\3M\5M\u03f7\nM\3M\3M\5M\u03fb\nM\3N\3N\5N\u03ff\n")
        buf.write("N\3N\3N\3N\3N\5N\u0405\nN\3O\3O\5O\u0409\nO\3P\3P\3P\3")
        buf.write("P\3P\5P\u0410\nP\3Q\3Q\3Q\5Q\u0415\nQ\3R\3R\5R\u0419\n")
        buf.write("R\3S\3S\3S\5S\u041e\nS\3T\3T\3U\3U\3U\5U\u0425\nU\3V\3")
        buf.write("V\3V\2\2W\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&")
        buf.write("(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~")
        buf.write("\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\2\6\3\2P\\\3\2./\3\2&\'\3\2(")
        buf.write("+\2\u0499\2\u00b1\3\2\2\2\4\u00b7\3\2\2\2\6\u00bc\3\2")
        buf.write("\2\2\b\u00c5\3\2\2\2\n\u00d1\3\2\2\2\f\u00d5\3\2\2\2\16")
        buf.write("\u00da\3\2\2\2\20\u00e4\3\2\2\2\22\u012b\3\2\2\2\24\u012d")
        buf.write("\3\2\2\2\26\u0173\3\2\2\2\30\u0175\3\2\2\2\32\u0179\3")
        buf.write("\2\2\2\34\u017b\3\2\2\2\36\u0191\3\2\2\2 \u0193\3\2\2")
        buf.write("\2\"\u01a7\3\2\2\2$\u01b6\3\2\2\2&\u01b8\3\2\2\2(\u01bb")
        buf.write("\3\2\2\2*\u01c2\3\2\2\2,\u01c4\3\2\2\2.\u01c6\3\2\2\2")
        buf.write("\60\u01c8\3\2\2\2\62\u01cc\3\2\2\2\64\u01ce\3\2\2\2\66")
        buf.write("\u01d8\3\2\2\28\u01da\3\2\2\2:\u01dd\3\2\2\2<\u01f5\3")
        buf.write("\2\2\2>\u01fa\3\2\2\2@\u01ff\3\2\2\2B\u020a\3\2\2\2D\u0212")
        buf.write("\3\2\2\2F\u021a\3\2\2\2H\u0223\3\2\2\2J\u0227\3\2\2\2")
        buf.write("L\u0230\3\2\2\2N\u023e\3\2\2\2P\u0240\3\2\2\2R\u0253\3")
        buf.write("\2\2\2T\u025c\3\2\2\2V\u0267\3\2\2\2X\u0281\3\2\2\2Z\u028d")
        buf.write("\3\2\2\2\\\u0292\3\2\2\2^\u02a4\3\2\2\2`\u02af\3\2\2\2")
        buf.write("b\u02b3\3\2\2\2d\u02b5\3\2\2\2f\u02bc\3\2\2\2h\u02c3\3")
        buf.write("\2\2\2j\u02cb\3\2\2\2l\u02d6\3\2\2\2n\u02d8\3\2\2\2p\u02ee")
        buf.write("\3\2\2\2r\u02f1\3\2\2\2t\u02f5\3\2\2\2v\u02fd\3\2\2\2")
        buf.write("x\u0305\3\2\2\2z\u030d\3\2\2\2|\u0317\3\2\2\2~\u0321\3")
        buf.write("\2\2\2\u0080\u0338\3\2\2\2\u0082\u033a\3\2\2\2\u0084\u0360")
        buf.write("\3\2\2\2\u0086\u0362\3\2\2\2\u0088\u037b\3\2\2\2\u008a")
        buf.write("\u037d\3\2\2\2\u008c\u0393\3\2\2\2\u008e\u0395\3\2\2\2")
        buf.write("\u0090\u0399\3\2\2\2\u0092\u03a4\3\2\2\2\u0094\u03d0\3")
        buf.write("\2\2\2\u0096\u03d2\3\2\2\2\u0098\u03e3\3\2\2\2\u009a\u0404")
        buf.write("\3\2\2\2\u009c\u0408\3\2\2\2\u009e\u040a\3\2\2\2\u00a0")
        buf.write("\u0411\3\2\2\2\u00a2\u0416\3\2\2\2\u00a4\u041d\3\2\2\2")
        buf.write("\u00a6\u041f\3\2\2\2\u00a8\u0424\3\2\2\2\u00aa\u0426\3")
        buf.write("\2\2\2\u00ac\u00b2\7$\2\2\u00ad\u00b2\5\34\17\2\u00ae")
        buf.write("\u00af\5N(\2\u00af\u00b0\7$\2\2\u00b0\u00b2\3\2\2\2\u00b1")
        buf.write("\u00ac\3\2\2\2\u00b1\u00ad\3\2\2\2\u00b1\u00ae\3\2\2\2")
        buf.write("\u00b2\3\3\2\2\2\u00b3\u00b6\7$\2\2\u00b4\u00b6\5\32\16")
        buf.write("\2\u00b5\u00b3\3\2\2\2\u00b5\u00b4\3\2\2\2\u00b6\u00b9")
        buf.write("\3\2\2\2\u00b7\u00b5\3\2\2\2\u00b7\u00b8\3\2\2\2\u00b8")
        buf.write("\u00ba\3\2\2\2\u00b9\u00b7\3\2\2\2\u00ba\u00bb\7\2\2\3")
        buf.write("\u00bb\5\3\2\2\2\u00bc\u00c0\5\u0092J\2\u00bd\u00bf\7")
        buf.write("$\2\2\u00be\u00bd\3\2\2\2\u00bf\u00c2\3\2\2\2\u00c0\u00be")
        buf.write("\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1\u00c3\3\2\2\2\u00c2")
        buf.write("\u00c0\3\2\2\2\u00c3\u00c4\7\2\2\3\u00c4\7\3\2\2\2\u00c5")
        buf.write("\u00c6\7N\2\2\u00c6\u00cc\5D#\2\u00c7\u00c9\7\61\2\2\u00c8")
        buf.write("\u00ca\5\u0098M\2\u00c9\u00c8\3\2\2\2\u00c9\u00ca\3\2")
        buf.write("\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00cd\7\62\2\2\u00cc\u00c7")
        buf.write("\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce")
        buf.write("\u00cf\7$\2\2\u00cf\t\3\2\2\2\u00d0\u00d2\5\b\5\2\u00d1")
        buf.write("\u00d0\3\2\2\2\u00d2\u00d3\3\2\2\2\u00d3\u00d1\3\2\2\2")
        buf.write("\u00d3\u00d4\3\2\2\2\u00d4\13\3\2\2\2\u00d5\u00d8\5\n")
        buf.write("\6\2\u00d6\u00d9\5\u0096L\2\u00d7\u00d9\5\16\b\2\u00d8")
        buf.write("\u00d6\3\2\2\2\u00d8\u00d7\3\2\2\2\u00d9\r\3\2\2\2\u00da")
        buf.write("\u00db\7\3\2\2\u00db\u00dc\7%\2\2\u00dc\u00df\5\20\t\2")
        buf.write("\u00dd\u00de\7O\2\2\u00de\u00e0\5`\61\2\u00df\u00dd\3")
        buf.write("\2\2\2\u00df\u00e0\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\u00e2")
        buf.write("\7\64\2\2\u00e2\u00e3\5^\60\2\u00e3\17\3\2\2\2\u00e4\u00e6")
        buf.write("\7\61\2\2\u00e5\u00e7\5\22\n\2\u00e6\u00e5\3\2\2\2\u00e6")
        buf.write("\u00e7\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00e9\7\62\2")
        buf.write("\2\u00e9\21\3\2\2\2\u00ea\u00ed\5\24\13\2\u00eb\u00ec")
        buf.write("\7\67\2\2\u00ec\u00ee\5`\61\2\u00ed\u00eb\3\2\2\2\u00ed")
        buf.write("\u00ee\3\2\2\2\u00ee\u00f7\3\2\2\2\u00ef\u00f0\7\63\2")
        buf.write("\2\u00f0\u00f3\5\24\13\2\u00f1\u00f2\7\67\2\2\u00f2\u00f4")
        buf.write("\5`\61\2\u00f3\u00f1\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4")
        buf.write("\u00f6\3\2\2\2\u00f5\u00ef\3\2\2\2\u00f6\u00f9\3\2\2\2")
        buf.write("\u00f7\u00f5\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\u0113\3")
        buf.write("\2\2\2\u00f9\u00f7\3\2\2\2\u00fa\u0111\7\63\2\2\u00fb")
        buf.write("\u00fd\7\60\2\2\u00fc\u00fe\5\24\13\2\u00fd\u00fc\3\2")
        buf.write("\2\2\u00fd\u00fe\3\2\2\2\u00fe\u0107\3\2\2\2\u00ff\u0100")
        buf.write("\7\63\2\2\u0100\u0103\5\24\13\2\u0101\u0102\7\67\2\2\u0102")
        buf.write("\u0104\5`\61\2\u0103\u0101\3\2\2\2\u0103\u0104\3\2\2\2")
        buf.write("\u0104\u0106\3\2\2\2\u0105\u00ff\3\2\2\2\u0106\u0109\3")
        buf.write("\2\2\2\u0107\u0105\3\2\2\2\u0107\u0108\3\2\2\2\u0108\u010d")
        buf.write("\3\2\2\2\u0109\u0107\3\2\2\2\u010a\u010b\7\63\2\2\u010b")
        buf.write("\u010c\7\66\2\2\u010c\u010e\5\24\13\2\u010d\u010a\3\2")
        buf.write("\2\2\u010d\u010e\3\2\2\2\u010e\u0112\3\2\2\2\u010f\u0110")
        buf.write("\7\66\2\2\u0110\u0112\5\24\13\2\u0111\u00fb\3\2\2\2\u0111")
        buf.write("\u010f\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0114\3\2\2\2")
        buf.write("\u0113\u00fa\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u012c\3")
        buf.write("\2\2\2\u0115\u0117\7\60\2\2\u0116\u0118\5\24\13\2\u0117")
        buf.write("\u0116\3\2\2\2\u0117\u0118\3\2\2\2\u0118\u0121\3\2\2\2")
        buf.write("\u0119\u011a\7\63\2\2\u011a\u011d\5\24\13\2\u011b\u011c")
        buf.write("\7\67\2\2\u011c\u011e\5`\61\2\u011d\u011b\3\2\2\2\u011d")
        buf.write("\u011e\3\2\2\2\u011e\u0120\3\2\2\2\u011f\u0119\3\2\2\2")
        buf.write("\u0120\u0123\3\2\2\2\u0121\u011f\3\2\2\2\u0121\u0122\3")
        buf.write("\2\2\2\u0122\u0127\3\2\2\2\u0123\u0121\3\2\2\2\u0124\u0125")
        buf.write("\7\63\2\2\u0125\u0126\7\66\2\2\u0126\u0128\5\24\13\2\u0127")
        buf.write("\u0124\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u012c\3\2\2\2")
        buf.write("\u0129\u012a\7\66\2\2\u012a\u012c\5\24\13\2\u012b\u00ea")
        buf.write("\3\2\2\2\u012b\u0115\3\2\2\2\u012b\u0129\3\2\2\2\u012c")
        buf.write("\23\3\2\2\2\u012d\u0130\7%\2\2\u012e\u012f\7\64\2\2\u012f")
        buf.write("\u0131\5`\61\2\u0130\u012e\3\2\2\2\u0130\u0131\3\2\2\2")
        buf.write("\u0131\25\3\2\2\2\u0132\u0135\5\30\r\2\u0133\u0134\7\67")
        buf.write("\2\2\u0134\u0136\5`\61\2\u0135\u0133\3\2\2\2\u0135\u0136")
        buf.write("\3\2\2\2\u0136\u013f\3\2\2\2\u0137\u0138\7\63\2\2\u0138")
        buf.write("\u013b\5\30\r\2\u0139\u013a\7\67\2\2\u013a\u013c\5`\61")
        buf.write("\2\u013b\u0139\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u013e")
        buf.write("\3\2\2\2\u013d\u0137\3\2\2\2\u013e\u0141\3\2\2\2\u013f")
        buf.write("\u013d\3\2\2\2\u013f\u0140\3\2\2\2\u0140\u015b\3\2\2\2")
        buf.write("\u0141\u013f\3\2\2\2\u0142\u0159\7\63\2\2\u0143\u0145")
        buf.write("\7\60\2\2\u0144\u0146\5\30\r\2\u0145\u0144\3\2\2\2\u0145")
        buf.write("\u0146\3\2\2\2\u0146\u014f\3\2\2\2\u0147\u0148\7\63\2")
        buf.write("\2\u0148\u014b\5\30\r\2\u0149\u014a\7\67\2\2\u014a\u014c")
        buf.write("\5`\61\2\u014b\u0149\3\2\2\2\u014b\u014c\3\2\2\2\u014c")
        buf.write("\u014e\3\2\2\2\u014d\u0147\3\2\2\2\u014e\u0151\3\2\2\2")
        buf.write("\u014f\u014d\3\2\2\2\u014f\u0150\3\2\2\2\u0150\u0155\3")
        buf.write("\2\2\2\u0151\u014f\3\2\2\2\u0152\u0153\7\63\2\2\u0153")
        buf.write("\u0154\7\66\2\2\u0154\u0156\5\30\r\2\u0155\u0152\3\2\2")
        buf.write("\2\u0155\u0156\3\2\2\2\u0156\u015a\3\2\2\2\u0157\u0158")
        buf.write("\7\66\2\2\u0158\u015a\5\30\r\2\u0159\u0143\3\2\2\2\u0159")
        buf.write("\u0157\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015c\3\2\2\2")
        buf.write("\u015b\u0142\3\2\2\2\u015b\u015c\3\2\2\2\u015c\u0174\3")
        buf.write("\2\2\2\u015d\u015f\7\60\2\2\u015e\u0160\5\30\r\2\u015f")
        buf.write("\u015e\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u0169\3\2\2\2")
        buf.write("\u0161\u0162\7\63\2\2\u0162\u0165\5\30\r\2\u0163\u0164")
        buf.write("\7\67\2\2\u0164\u0166\5`\61\2\u0165\u0163\3\2\2\2\u0165")
        buf.write("\u0166\3\2\2\2\u0166\u0168\3\2\2\2\u0167\u0161\3\2\2\2")
        buf.write("\u0168\u016b\3\2\2\2\u0169\u0167\3\2\2\2\u0169\u016a\3")
        buf.write("\2\2\2\u016a\u016f\3\2\2\2\u016b\u0169\3\2\2\2\u016c\u016d")
        buf.write("\7\63\2\2\u016d\u016e\7\66\2\2\u016e\u0170\5\30\r\2\u016f")
        buf.write("\u016c\3\2\2\2\u016f\u0170\3\2\2\2\u0170\u0174\3\2\2\2")
        buf.write("\u0171\u0172\7\66\2\2\u0172\u0174\5\30\r\2\u0173\u0132")
        buf.write("\3\2\2\2\u0173\u015d\3\2\2\2\u0173\u0171\3\2\2\2\u0174")
        buf.write("\27\3\2\2\2\u0175\u0176\7%\2\2\u0176\31\3\2\2\2\u0177")
        buf.write("\u017a\5\34\17\2\u0178\u017a\5N(\2\u0179\u0177\3\2\2\2")
        buf.write("\u0179\u0178\3\2\2\2\u017a\33\3\2\2\2\u017b\u0180\5\36")
        buf.write("\20\2\u017c\u017d\7\65\2\2\u017d\u017f\5\36\20\2\u017e")
        buf.write("\u017c\3\2\2\2\u017f\u0182\3\2\2\2\u0180\u017e\3\2\2\2")
        buf.write("\u0180\u0181\3\2\2\2\u0181\u0184\3\2\2\2\u0182\u0180\3")
        buf.write("\2\2\2\u0183\u0185\7\65\2\2\u0184\u0183\3\2\2\2\u0184")
        buf.write("\u0185\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u0187\7$\2\2")
        buf.write("\u0187\35\3\2\2\2\u0188\u0192\5 \21\2\u0189\u0192\5&\24")
        buf.write("\2\u018a\u0192\5(\25\2\u018b\u0192\5*\26\2\u018c\u0192")
        buf.write("\5\66\34\2\u018d\u0192\5F$\2\u018e\u0192\5H%\2\u018f\u0192")
        buf.write("\5J&\2\u0190\u0192\5L\'\2\u0191\u0188\3\2\2\2\u0191\u0189")
        buf.write("\3\2\2\2\u0191\u018a\3\2\2\2\u0191\u018b\3\2\2\2\u0191")
        buf.write("\u018c\3\2\2\2\u0191\u018d\3\2\2\2\u0191\u018e\3\2\2\2")
        buf.write("\u0191\u018f\3\2\2\2\u0191\u0190\3\2\2\2\u0192\37\3\2")
        buf.write("\2\2\u0193\u01a3\5\"\22\2\u0194\u0197\5$\23\2\u0195\u0198")
        buf.write("\5\u00a2R\2\u0196\u0198\5\u0092J\2\u0197\u0195\3\2\2\2")
        buf.write("\u0197\u0196\3\2\2\2\u0198\u01a4\3\2\2\2\u0199\u019c\7")
        buf.write("\67\2\2\u019a\u019d\5\u00a2R\2\u019b\u019d\5\"\22\2\u019c")
        buf.write("\u019a\3\2\2\2\u019c\u019b\3\2\2\2\u019d\u019f\3\2\2\2")
        buf.write("\u019e\u0199\3\2\2\2\u019f\u01a2\3\2\2\2\u01a0\u019e\3")
        buf.write("\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a4\3\2\2\2\u01a2\u01a0")
        buf.write("\3\2\2\2\u01a3\u0194\3\2\2\2\u01a3\u01a0\3\2\2\2\u01a4")
        buf.write("!\3\2\2\2\u01a5\u01a8\5`\61\2\u01a6\u01a8\5r:\2\u01a7")
        buf.write("\u01a5\3\2\2\2\u01a7\u01a6\3\2\2\2\u01a8\u01b0\3\2\2\2")
        buf.write("\u01a9\u01ac\7\63\2\2\u01aa\u01ad\5`\61\2\u01ab\u01ad")
        buf.write("\5r:\2\u01ac\u01aa\3\2\2\2\u01ac\u01ab\3\2\2\2\u01ad\u01af")
        buf.write("\3\2\2\2\u01ae\u01a9\3\2\2\2\u01af\u01b2\3\2\2\2\u01b0")
        buf.write("\u01ae\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b4\3\2\2\2")
        buf.write("\u01b2\u01b0\3\2\2\2\u01b3\u01b5\7\63\2\2\u01b4\u01b3")
        buf.write("\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5#\3\2\2\2\u01b6\u01b7")
        buf.write("\t\2\2\2\u01b7%\3\2\2\2\u01b8\u01b9\7 \2\2\u01b9\u01ba")
        buf.write("\5\u0090I\2\u01ba\'\3\2\2\2\u01bb\u01bc\7!\2\2\u01bc)")
        buf.write("\3\2\2\2\u01bd\u01c3\5,\27\2\u01be\u01c3\5.\30\2\u01bf")
        buf.write("\u01c3\5\60\31\2\u01c0\u01c3\5\64\33\2\u01c1\u01c3\5\62")
        buf.write("\32\2\u01c2\u01bd\3\2\2\2\u01c2\u01be\3\2\2\2\u01c2\u01bf")
        buf.write("\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c2\u01c1\3\2\2\2\u01c3")
        buf.write("+\3\2\2\2\u01c4\u01c5\7#\2\2\u01c5-\3\2\2\2\u01c6\u01c7")
        buf.write("\7\"\2\2\u01c7/\3\2\2\2\u01c8\u01ca\7\4\2\2\u01c9\u01cb")
        buf.write("\5\u0092J\2\u01ca\u01c9\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb")
        buf.write("\61\3\2\2\2\u01cc\u01cd\5\u00a2R\2\u01cd\63\3\2\2\2\u01ce")
        buf.write("\u01d4\7\5\2\2\u01cf\u01d2\5`\61\2\u01d0\u01d1\7\6\2\2")
        buf.write("\u01d1\u01d3\5`\61\2\u01d2\u01d0\3\2\2\2\u01d2\u01d3\3")
        buf.write("\2\2\2\u01d3\u01d5\3\2\2\2\u01d4\u01cf\3\2\2\2\u01d4\u01d5")
        buf.write("\3\2\2\2\u01d5\65\3\2\2\2\u01d6\u01d9\58\35\2\u01d7\u01d9")
        buf.write("\5:\36\2\u01d8\u01d6\3\2\2\2\u01d8\u01d7\3\2\2\2\u01d9")
        buf.write("\67\3\2\2\2\u01da\u01db\7\7\2\2\u01db\u01dc\5B\"\2\u01dc")
        buf.write("9\3\2\2\2\u01dd\u01ea\7\6\2\2\u01de\u01e0\t\3\2\2\u01df")
        buf.write("\u01de\3\2\2\2\u01e0\u01e3\3\2\2\2\u01e1\u01df\3\2\2\2")
        buf.write("\u01e1\u01e2\3\2\2\2\u01e2\u01e4\3\2\2\2\u01e3\u01e1\3")
        buf.write("\2\2\2\u01e4\u01eb\5D#\2\u01e5\u01e7\t\3\2\2\u01e6\u01e5")
        buf.write("\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\u01e6\3\2\2\2\u01e8")
        buf.write("\u01e9\3\2\2\2\u01e9\u01eb\3\2\2\2\u01ea\u01e1\3\2\2\2")
        buf.write("\u01ea\u01e6\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec\u01f3\7")
        buf.write("\7\2\2\u01ed\u01f4\7\60\2\2\u01ee\u01ef\7\61\2\2\u01ef")
        buf.write("\u01f0\5@!\2\u01f0\u01f1\7\62\2\2\u01f1\u01f4\3\2\2\2")
        buf.write("\u01f2\u01f4\5@!\2\u01f3\u01ed\3\2\2\2\u01f3\u01ee\3\2")
        buf.write("\2\2\u01f3\u01f2\3\2\2\2\u01f4;\3\2\2\2\u01f5\u01f8\7")
        buf.write("%\2\2\u01f6\u01f7\7\b\2\2\u01f7\u01f9\7%\2\2\u01f8\u01f6")
        buf.write("\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9=\3\2\2\2\u01fa\u01fd")
        buf.write("\5D#\2\u01fb\u01fc\7\b\2\2\u01fc\u01fe\7%\2\2\u01fd\u01fb")
        buf.write("\3\2\2\2\u01fd\u01fe\3\2\2\2\u01fe?\3\2\2\2\u01ff\u0204")
        buf.write("\5<\37\2\u0200\u0201\7\63\2\2\u0201\u0203\5<\37\2\u0202")
        buf.write("\u0200\3\2\2\2\u0203\u0206\3\2\2\2\u0204\u0202\3\2\2\2")
        buf.write("\u0204\u0205\3\2\2\2\u0205\u0208\3\2\2\2\u0206\u0204\3")
        buf.write("\2\2\2\u0207\u0209\7\63\2\2\u0208\u0207\3\2\2\2\u0208")
        buf.write("\u0209\3\2\2\2\u0209A\3\2\2\2\u020a\u020f\5> \2\u020b")
        buf.write("\u020c\7\63\2\2\u020c\u020e\5> \2\u020d\u020b\3\2\2\2")
        buf.write("\u020e\u0211\3\2\2\2\u020f\u020d\3\2\2\2\u020f\u0210\3")
        buf.write("\2\2\2\u0210C\3\2\2\2\u0211\u020f\3\2\2\2\u0212\u0217")
        buf.write("\7%\2\2\u0213\u0214\7.\2\2\u0214\u0216\7%\2\2\u0215\u0213")
        buf.write("\3\2\2\2\u0216\u0219\3\2\2\2\u0217\u0215\3\2\2\2\u0217")
        buf.write("\u0218\3\2\2\2\u0218E\3\2\2\2\u0219\u0217\3\2\2\2\u021a")
        buf.write("\u021b\7\t\2\2\u021b\u0220\7%\2\2\u021c\u021d\7\63\2\2")
        buf.write("\u021d\u021f\7%\2\2\u021e\u021c\3\2\2\2\u021f\u0222\3")
        buf.write("\2\2\2\u0220\u021e\3\2\2\2\u0220\u0221\3\2\2\2\u0221G")
        buf.write("\3\2\2\2\u0222\u0220\3\2\2\2\u0223\u0224\7%\2\2\u0224")
        buf.write("\u0225\7\64\2\2\u0225\u0226\5 \21\2\u0226I\3\2\2\2\u0227")
        buf.write("\u0228\7\n\2\2\u0228\u022d\7%\2\2\u0229\u022a\7\63\2\2")
        buf.write("\u022a\u022c\7%\2\2\u022b\u0229\3\2\2\2\u022c\u022f\3")
        buf.write("\2\2\2\u022d\u022b\3\2\2\2\u022d\u022e\3\2\2\2\u022eK")
        buf.write("\3\2\2\2\u022f\u022d\3\2\2\2\u0230\u0231\7\13\2\2\u0231")
        buf.write("\u0234\5`\61\2\u0232\u0233\7\63\2\2\u0233\u0235\5`\61")
        buf.write("\2\u0234\u0232\3\2\2\2\u0234\u0235\3\2\2\2\u0235M\3\2")
        buf.write("\2\2\u0236\u023f\5P)\2\u0237\u023f\5R*\2\u0238\u023f\5")
        buf.write("T+\2\u0239\u023f\5V,\2\u023a\u023f\5X-\2\u023b\u023f\5")
        buf.write("\16\b\2\u023c\u023f\5\u0096L\2\u023d\u023f\5\f\7\2\u023e")
        buf.write("\u0236\3\2\2\2\u023e\u0237\3\2\2\2\u023e\u0238\3\2\2\2")
        buf.write("\u023e\u0239\3\2\2\2\u023e\u023a\3\2\2\2\u023e\u023b\3")
        buf.write("\2\2\2\u023e\u023c\3\2\2\2\u023e\u023d\3\2\2\2\u023fO")
        buf.write("\3\2\2\2\u0240\u0241\7\f\2\2\u0241\u0242\5`\61\2\u0242")
        buf.write("\u0243\7\64\2\2\u0243\u024b\5^\60\2\u0244\u0245\7\r\2")
        buf.write("\2\u0245\u0246\5`\61\2\u0246\u0247\7\64\2\2\u0247\u0248")
        buf.write("\5^\60\2\u0248\u024a\3\2\2\2\u0249\u0244\3\2\2\2\u024a")
        buf.write("\u024d\3\2\2\2\u024b\u0249\3\2\2\2\u024b\u024c\3\2\2\2")
        buf.write("\u024c\u0251\3\2\2\2\u024d\u024b\3\2\2\2\u024e\u024f\7")
        buf.write("\16\2\2\u024f\u0250\7\64\2\2\u0250\u0252\5^\60\2\u0251")
        buf.write("\u024e\3\2\2\2\u0251\u0252\3\2\2\2\u0252Q\3\2\2\2\u0253")
        buf.write("\u0254\7\17\2\2\u0254\u0255\5`\61\2\u0255\u0256\7\64\2")
        buf.write("\2\u0256\u025a\5^\60\2\u0257\u0258\7\16\2\2\u0258\u0259")
        buf.write("\7\64\2\2\u0259\u025b\5^\60\2\u025a\u0257\3\2\2\2\u025a")
        buf.write("\u025b\3\2\2\2\u025bS\3\2\2\2\u025c\u025d\7\20\2\2\u025d")
        buf.write("\u025e\5\u0090I\2\u025e\u025f\7\21\2\2\u025f\u0260\5\u0092")
        buf.write("J\2\u0260\u0261\7\64\2\2\u0261\u0265\5^\60\2\u0262\u0263")
        buf.write("\7\16\2\2\u0263\u0264\7\64\2\2\u0264\u0266\5^\60\2\u0265")
        buf.write("\u0262\3\2\2\2\u0265\u0266\3\2\2\2\u0266U\3\2\2\2\u0267")
        buf.write("\u0268\7\22\2\2\u0268\u0269\7\64\2\2\u0269\u027f\5^\60")
        buf.write("\2\u026a\u026b\5\\/\2\u026b\u026c\7\64\2\2\u026c\u026d")
        buf.write("\5^\60\2\u026d\u026f\3\2\2\2\u026e\u026a\3\2\2\2\u026f")
        buf.write("\u0270\3\2\2\2\u0270\u026e\3\2\2\2\u0270\u0271\3\2\2\2")
        buf.write("\u0271\u0275\3\2\2\2\u0272\u0273\7\16\2\2\u0273\u0274")
        buf.write("\7\64\2\2\u0274\u0276\5^\60\2\u0275\u0272\3\2\2\2\u0275")
        buf.write("\u0276\3\2\2\2\u0276\u027a\3\2\2\2\u0277\u0278\7\23\2")
        buf.write("\2\u0278\u0279\7\64\2\2\u0279\u027b\5^\60\2\u027a\u0277")
        buf.write("\3\2\2\2\u027a\u027b\3\2\2\2\u027b\u0280\3\2\2\2\u027c")
        buf.write("\u027d\7\23\2\2\u027d\u027e\7\64\2\2\u027e\u0280\5^\60")
        buf.write("\2\u027f\u026e\3\2\2\2\u027f\u027c\3\2\2\2\u0280W\3\2")
        buf.write("\2\2\u0281\u0282\7\24\2\2\u0282\u0287\5Z.\2\u0283\u0284")
        buf.write("\7\63\2\2\u0284\u0286\5Z.\2\u0285\u0283\3\2\2\2\u0286")
        buf.write("\u0289\3\2\2\2\u0287\u0285\3\2\2\2\u0287\u0288\3\2\2\2")
        buf.write("\u0288\u028a\3\2\2\2\u0289\u0287\3\2\2\2\u028a\u028b\7")
        buf.write("\64\2\2\u028b\u028c\5^\60\2\u028cY\3\2\2\2\u028d\u0290")
        buf.write("\5`\61\2\u028e\u028f\7\b\2\2\u028f\u0291\5t;\2\u0290\u028e")
        buf.write("\3\2\2\2\u0290\u0291\3\2\2\2\u0291[\3\2\2\2\u0292\u0298")
        buf.write("\7\25\2\2\u0293\u0296\5`\61\2\u0294\u0295\7\b\2\2\u0295")
        buf.write("\u0297\7%\2\2\u0296\u0294\3\2\2\2\u0296\u0297\3\2\2\2")
        buf.write("\u0297\u0299\3\2\2\2\u0298\u0293\3\2\2\2\u0298\u0299\3")
        buf.write("\2\2\2\u0299]\3\2\2\2\u029a\u02a5\5\34\17\2\u029b\u029c")
        buf.write("\7$\2\2\u029c\u029e\7_\2\2\u029d\u029f\5\32\16\2\u029e")
        buf.write("\u029d\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0\u029e\3\2\2\2")
        buf.write("\u02a0\u02a1\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a3\7")
        buf.write("`\2\2\u02a3\u02a5\3\2\2\2\u02a4\u029a\3\2\2\2\u02a4\u029b")
        buf.write("\3\2\2\2\u02a5_\3\2\2\2\u02a6\u02ac\5h\65\2\u02a7\u02a8")
        buf.write("\7\f\2\2\u02a8\u02a9\5h\65\2\u02a9\u02aa\7\16\2\2\u02aa")
        buf.write("\u02ab\5`\61\2\u02ab\u02ad\3\2\2\2\u02ac\u02a7\3\2\2\2")
        buf.write("\u02ac\u02ad\3\2\2\2\u02ad\u02b0\3\2\2\2\u02ae\u02b0\5")
        buf.write("d\63\2\u02af\u02a6\3\2\2\2\u02af\u02ae\3\2\2\2\u02b0a")
        buf.write("\3\2\2\2\u02b1\u02b4\5h\65\2\u02b2\u02b4\5f\64\2\u02b3")
        buf.write("\u02b1\3\2\2\2\u02b3\u02b2\3\2\2\2\u02b4c\3\2\2\2\u02b5")
        buf.write("\u02b7\7\26\2\2\u02b6\u02b8\5\26\f\2\u02b7\u02b6\3\2\2")
        buf.write("\2\u02b7\u02b8\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02ba")
        buf.write("\7\64\2\2\u02ba\u02bb\5`\61\2\u02bbe\3\2\2\2\u02bc\u02be")
        buf.write("\7\26\2\2\u02bd\u02bf\5\26\f\2\u02be\u02bd\3\2\2\2\u02be")
        buf.write("\u02bf\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0\u02c1\7\64\2")
        buf.write("\2\u02c1\u02c2\5b\62\2\u02c2g\3\2\2\2\u02c3\u02c8\5j\66")
        buf.write("\2\u02c4\u02c5\7\27\2\2\u02c5\u02c7\5j\66\2\u02c6\u02c4")
        buf.write("\3\2\2\2\u02c7\u02ca\3\2\2\2\u02c8\u02c6\3\2\2\2\u02c8")
        buf.write("\u02c9\3\2\2\2\u02c9i\3\2\2\2\u02ca\u02c8\3\2\2\2\u02cb")
        buf.write("\u02d0\5l\67\2\u02cc\u02cd\7\30\2\2\u02cd\u02cf\5l\67")
        buf.write("\2\u02ce\u02cc\3\2\2\2\u02cf\u02d2\3\2\2\2\u02d0\u02ce")
        buf.write("\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1k\3\2\2\2\u02d2\u02d0")
        buf.write("\3\2\2\2\u02d3\u02d4\7\31\2\2\u02d4\u02d7\5l\67\2\u02d5")
        buf.write("\u02d7\5n8\2\u02d6\u02d3\3\2\2\2\u02d6\u02d5\3\2\2\2\u02d7")
        buf.write("m\3\2\2\2\u02d8\u02de\5r:\2\u02d9\u02da\5p9\2\u02da\u02db")
        buf.write("\5r:\2\u02db\u02dd\3\2\2\2\u02dc\u02d9\3\2\2\2\u02dd\u02e0")
        buf.write("\3\2\2\2\u02de\u02dc\3\2\2\2\u02de\u02df\3\2\2\2\u02df")
        buf.write("o\3\2\2\2\u02e0\u02de\3\2\2\2\u02e1\u02ef\7G\2\2\u02e2")
        buf.write("\u02ef\7H\2\2\u02e3\u02ef\7I\2\2\u02e4\u02ef\7J\2\2\u02e5")
        buf.write("\u02ef\7K\2\2\u02e6\u02ef\7L\2\2\u02e7\u02ef\7M\2\2\u02e8")
        buf.write("\u02ef\7\21\2\2\u02e9\u02ea\7\31\2\2\u02ea\u02ef\7\21")
        buf.write("\2\2\u02eb\u02ef\7\32\2\2\u02ec\u02ed\7\32\2\2\u02ed\u02ef")
        buf.write("\7\31\2\2\u02ee\u02e1\3\2\2\2\u02ee\u02e2\3\2\2\2\u02ee")
        buf.write("\u02e3\3\2\2\2\u02ee\u02e4\3\2\2\2\u02ee\u02e5\3\2\2\2")
        buf.write("\u02ee\u02e6\3\2\2\2\u02ee\u02e7\3\2\2\2\u02ee\u02e8\3")
        buf.write("\2\2\2\u02ee\u02e9\3\2\2\2\u02ee\u02eb\3\2\2\2\u02ee\u02ec")
        buf.write("\3\2\2\2\u02efq\3\2\2\2\u02f0\u02f2\7\60\2\2\u02f1\u02f0")
        buf.write("\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3")
        buf.write("\u02f4\5t;\2\u02f4s\3\2\2\2\u02f5\u02fa\5v<\2\u02f6\u02f7")
        buf.write("\7:\2\2\u02f7\u02f9\5v<\2\u02f8\u02f6\3\2\2\2\u02f9\u02fc")
        buf.write("\3\2\2\2\u02fa\u02f8\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb")
        buf.write("u\3\2\2\2\u02fc\u02fa\3\2\2\2\u02fd\u0302\5x=\2\u02fe")
        buf.write("\u02ff\7;\2\2\u02ff\u0301\5x=\2\u0300\u02fe\3\2\2\2\u0301")
        buf.write("\u0304\3\2\2\2\u0302\u0300\3\2\2\2\u0302\u0303\3\2\2\2")
        buf.write("\u0303w\3\2\2\2\u0304\u0302\3\2\2\2\u0305\u030a\5z>\2")
        buf.write("\u0306\u0307\7<\2\2\u0307\u0309\5z>\2\u0308\u0306\3\2")
        buf.write("\2\2\u0309\u030c\3\2\2\2\u030a\u0308\3\2\2\2\u030a\u030b")
        buf.write("\3\2\2\2\u030by\3\2\2\2\u030c\u030a\3\2\2\2\u030d\u0314")
        buf.write("\5|?\2\u030e\u030f\7=\2\2\u030f\u0313\5|?\2\u0310\u0311")
        buf.write("\7>\2\2\u0311\u0313\5|?\2\u0312\u030e\3\2\2\2\u0312\u0310")
        buf.write("\3\2\2\2\u0313\u0316\3\2\2\2\u0314\u0312\3\2\2\2\u0314")
        buf.write("\u0315\3\2\2\2\u0315{\3\2\2\2\u0316\u0314\3\2\2\2\u0317")
        buf.write("\u031e\5~@\2\u0318\u0319\7?\2\2\u0319\u031d\5~@\2\u031a")
        buf.write("\u031b\7@\2\2\u031b\u031d\5~@\2\u031c\u0318\3\2\2\2\u031c")
        buf.write("\u031a\3\2\2\2\u031d\u0320\3\2\2\2\u031e\u031c\3\2\2\2")
        buf.write("\u031e\u031f\3\2\2\2\u031f}\3\2\2\2\u0320\u031e\3\2\2")
        buf.write("\2\u0321\u032e\5\u0080A\2\u0322\u0323\7\60\2\2\u0323\u032d")
        buf.write("\5\u0080A\2\u0324\u0325\7A\2\2\u0325\u032d\5\u0080A\2")
        buf.write("\u0326\u0327\7B\2\2\u0327\u032d\5\u0080A\2\u0328\u0329")
        buf.write("\7C\2\2\u0329\u032d\5\u0080A\2\u032a\u032b\7N\2\2\u032b")
        buf.write("\u032d\5\u0080A\2\u032c\u0322\3\2\2\2\u032c\u0324\3\2")
        buf.write("\2\2\u032c\u0326\3\2\2\2\u032c\u0328\3\2\2\2\u032c\u032a")
        buf.write("\3\2\2\2\u032d\u0330\3\2\2\2\u032e\u032c\3\2\2\2\u032e")
        buf.write("\u032f\3\2\2\2\u032f\177\3\2\2\2\u0330\u032e\3\2\2\2\u0331")
        buf.write("\u0332\7?\2\2\u0332\u0339\5\u0080A\2\u0333\u0334\7@\2")
        buf.write("\2\u0334\u0339\5\u0080A\2\u0335\u0336\7D\2\2\u0336\u0339")
        buf.write("\5\u0080A\2\u0337\u0339\5\u0082B\2\u0338\u0331\3\2\2\2")
        buf.write("\u0338\u0333\3\2\2\2\u0338\u0335\3\2\2\2\u0338\u0337\3")
        buf.write("\2\2\2\u0339\u0081\3\2\2\2\u033a\u033e\5\u0084C\2\u033b")
        buf.write("\u033d\5\u0088E\2\u033c\u033b\3\2\2\2\u033d\u0340\3\2")
        buf.write("\2\2\u033e\u033c\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0343")
        buf.write("\3\2\2\2\u0340\u033e\3\2\2\2\u0341\u0342\7\66\2\2\u0342")
        buf.write("\u0344\5\u0080A\2\u0343\u0341\3\2\2\2\u0343\u0344\3\2")
        buf.write("\2\2\u0344\u0083\3\2\2\2\u0345\u0348\7\61\2\2\u0346\u0349")
        buf.write("\5\u00a2R\2\u0347\u0349\5\u0086D\2\u0348\u0346\3\2\2\2")
        buf.write("\u0348\u0347\3\2\2\2\u0348\u0349\3\2\2\2\u0349\u034a\3")
        buf.write("\2\2\2\u034a\u0361\7\62\2\2\u034b\u034d\78\2\2\u034c\u034e")
        buf.write("\5\u0086D\2\u034d\u034c\3\2\2\2\u034d\u034e\3\2\2\2\u034e")
        buf.write("\u034f\3\2\2\2\u034f\u0361\79\2\2\u0350\u0352\7E\2\2\u0351")
        buf.write("\u0353\5\u0094K\2\u0352\u0351\3\2\2\2\u0352\u0353\3\2")
        buf.write("\2\2\u0353\u0354\3\2\2\2\u0354\u0361\7F\2\2\u0355\u0361")
        buf.write("\7%\2\2\u0356\u0361\5\u00a8U\2\u0357\u0359\5\u00a6T\2")
        buf.write("\u0358\u0357\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u0358\3")
        buf.write("\2\2\2\u035a\u035b\3\2\2\2\u035b\u0361\3\2\2\2\u035c\u0361")
        buf.write("\7/\2\2\u035d\u0361\7\33\2\2\u035e\u0361\7\34\2\2\u035f")
        buf.write("\u0361\7\35\2\2\u0360\u0345\3\2\2\2\u0360\u034b\3\2\2")
        buf.write("\2\u0360\u0350\3\2\2\2\u0360\u0355\3\2\2\2\u0360\u0356")
        buf.write("\3\2\2\2\u0360\u0358\3\2\2\2\u0360\u035c\3\2\2\2\u0360")
        buf.write("\u035d\3\2\2\2\u0360\u035e\3\2\2\2\u0360\u035f\3\2\2\2")
        buf.write("\u0361\u0085\3\2\2\2\u0362\u036e\5`\61\2\u0363\u036f\5")
        buf.write("\u009eP\2\u0364\u0365\7\63\2\2\u0365\u0367\5`\61\2\u0366")
        buf.write("\u0364\3\2\2\2\u0367\u036a\3\2\2\2\u0368\u0366\3\2\2\2")
        buf.write("\u0368\u0369\3\2\2\2\u0369\u036c\3\2\2\2\u036a\u0368\3")
        buf.write("\2\2\2\u036b\u036d\7\63\2\2\u036c\u036b\3\2\2\2\u036c")
        buf.write("\u036d\3\2\2\2\u036d\u036f\3\2\2\2\u036e\u0363\3\2\2\2")
        buf.write("\u036e\u0368\3\2\2\2\u036f\u0087\3\2\2\2\u0370\u0372\7")
        buf.write("\61\2\2\u0371\u0373\5\u0098M\2\u0372\u0371\3\2\2\2\u0372")
        buf.write("\u0373\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u037c\7\62\2")
        buf.write("\2\u0375\u0376\78\2\2\u0376\u0377\5\u008aF\2\u0377\u0378")
        buf.write("\79\2\2\u0378\u037c\3\2\2\2\u0379\u037a\7.\2\2\u037a\u037c")
        buf.write("\7%\2\2\u037b\u0370\3\2\2\2\u037b\u0375\3\2\2\2\u037b")
        buf.write("\u0379\3\2\2\2\u037c\u0089\3\2\2\2\u037d\u0382\5\u008c")
        buf.write("G\2\u037e\u037f\7\63\2\2\u037f\u0381\5\u008cG\2\u0380")
        buf.write("\u037e\3\2\2\2\u0381\u0384\3\2\2\2\u0382\u0380\3\2\2\2")
        buf.write("\u0382\u0383\3\2\2\2\u0383\u0386\3\2\2\2\u0384\u0382\3")
        buf.write("\2\2\2\u0385\u0387\7\63\2\2\u0386\u0385\3\2\2\2\u0386")
        buf.write("\u0387\3\2\2\2\u0387\u008b\3\2\2\2\u0388\u0394\5`\61\2")
        buf.write("\u0389\u038b\5`\61\2\u038a\u0389\3\2\2\2\u038a\u038b\3")
        buf.write("\2\2\2\u038b\u038c\3\2\2\2\u038c\u038e\7\64\2\2\u038d")
        buf.write("\u038f\5`\61\2\u038e\u038d\3\2\2\2\u038e\u038f\3\2\2\2")
        buf.write("\u038f\u0391\3\2\2\2\u0390\u0392\5\u008eH\2\u0391\u0390")
        buf.write("\3\2\2\2\u0391\u0392\3\2\2\2\u0392\u0394\3\2\2\2\u0393")
        buf.write("\u0388\3\2\2\2\u0393\u038a\3\2\2\2\u0394\u008d\3\2\2\2")
        buf.write("\u0395\u0397\7\64\2\2\u0396\u0398\5`\61\2\u0397\u0396")
        buf.write("\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u008f\3\2\2\2\u0399")
        buf.write("\u039e\5r:\2\u039a\u039b\7\63\2\2\u039b\u039d\5r:\2\u039c")
        buf.write("\u039a\3\2\2\2\u039d\u03a0\3\2\2\2\u039e\u039c\3\2\2\2")
        buf.write("\u039e\u039f\3\2\2\2\u039f\u03a2\3\2\2\2\u03a0\u039e\3")
        buf.write("\2\2\2\u03a1\u03a3\7\63\2\2\u03a2\u03a1\3\2\2\2\u03a2")
        buf.write("\u03a3\3\2\2\2\u03a3\u0091\3\2\2\2\u03a4\u03a9\5`\61\2")
        buf.write("\u03a5\u03a6\7\63\2\2\u03a6\u03a8\5`\61\2\u03a7\u03a5")
        buf.write("\3\2\2\2\u03a8\u03ab\3\2\2\2\u03a9\u03a7\3\2\2\2\u03a9")
        buf.write("\u03aa\3\2\2\2\u03aa\u03ad\3\2\2\2\u03ab\u03a9\3\2\2\2")
        buf.write("\u03ac\u03ae\7\63\2\2\u03ad\u03ac\3\2\2\2\u03ad\u03ae")
        buf.write("\3\2\2\2\u03ae\u0093\3\2\2\2\u03af\u03b0\5`\61\2\u03b0")
        buf.write("\u03b1\7\64\2\2\u03b1\u03c0\5`\61\2\u03b2\u03c1\5\u009e")
        buf.write("P\2\u03b3\u03b4\7\63\2\2\u03b4\u03b5\5`\61\2\u03b5\u03b6")
        buf.write("\7\64\2\2\u03b6\u03b7\5`\61\2\u03b7\u03b9\3\2\2\2\u03b8")
        buf.write("\u03b3\3\2\2\2\u03b9\u03bc\3\2\2\2\u03ba\u03b8\3\2\2\2")
        buf.write("\u03ba\u03bb\3\2\2\2\u03bb\u03be\3\2\2\2\u03bc\u03ba\3")
        buf.write("\2\2\2\u03bd\u03bf\7\63\2\2\u03be\u03bd\3\2\2\2\u03be")
        buf.write("\u03bf\3\2\2\2\u03bf\u03c1\3\2\2\2\u03c0\u03b2\3\2\2\2")
        buf.write("\u03c0\u03ba\3\2\2\2\u03c1\u03d1\3\2\2\2\u03c2\u03ce\5")
        buf.write("`\61\2\u03c3\u03cf\5\u009eP\2\u03c4\u03c5\7\63\2\2\u03c5")
        buf.write("\u03c7\5`\61\2\u03c6\u03c4\3\2\2\2\u03c7\u03ca\3\2\2\2")
        buf.write("\u03c8\u03c6\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03cc\3")
        buf.write("\2\2\2\u03ca\u03c8\3\2\2\2\u03cb\u03cd\7\63\2\2\u03cc")
        buf.write("\u03cb\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03cf\3\2\2\2")
        buf.write("\u03ce\u03c3\3\2\2\2\u03ce\u03c8\3\2\2\2\u03cf\u03d1\3")
        buf.write("\2\2\2\u03d0\u03af\3\2\2\2\u03d0\u03c2\3\2\2\2\u03d1\u0095")
        buf.write("\3\2\2\2\u03d2\u03d3\7\36\2\2\u03d3\u03d9\7%\2\2\u03d4")
        buf.write("\u03d6\7\61\2\2\u03d5\u03d7\5\u0098M\2\u03d6\u03d5\3\2")
        buf.write("\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03da")
        buf.write("\7\62\2\2\u03d9\u03d4\3\2\2\2\u03d9\u03da\3\2\2\2\u03da")
        buf.write("\u03db\3\2\2\2\u03db\u03dc\7\64\2\2\u03dc\u03dd\5^\60")
        buf.write("\2\u03dd\u0097\3\2\2\2\u03de\u03df\5\u009aN\2\u03df\u03e0")
        buf.write("\7\63\2\2\u03e0\u03e2\3\2\2\2\u03e1\u03de\3\2\2\2\u03e2")
        buf.write("\u03e5\3\2\2\2\u03e3\u03e1\3\2\2\2\u03e3\u03e4\3\2\2\2")
        buf.write("\u03e4\u03fa\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e6\u03e8\5")
        buf.write("\u009aN\2\u03e7\u03e9\7\63\2\2\u03e8\u03e7\3\2\2\2\u03e8")
        buf.write("\u03e9\3\2\2\2\u03e9\u03fb\3\2\2\2\u03ea\u03eb\7\60\2")
        buf.write("\2\u03eb\u03f0\5`\61\2\u03ec\u03ed\7\63\2\2\u03ed\u03ef")
        buf.write("\5\u009aN\2\u03ee\u03ec\3\2\2\2\u03ef\u03f2\3\2\2\2\u03f0")
        buf.write("\u03ee\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f6\3\2\2\2")
        buf.write("\u03f2\u03f0\3\2\2\2\u03f3\u03f4\7\63\2\2\u03f4\u03f5")
        buf.write("\7\66\2\2\u03f5\u03f7\5`\61\2\u03f6\u03f3\3\2\2\2\u03f6")
        buf.write("\u03f7\3\2\2\2\u03f7\u03fb\3\2\2\2\u03f8\u03f9\7\66\2")
        buf.write("\2\u03f9\u03fb\5`\61\2\u03fa\u03e6\3\2\2\2\u03fa\u03ea")
        buf.write("\3\2\2\2\u03fa\u03f8\3\2\2\2\u03fb\u0099\3\2\2\2\u03fc")
        buf.write("\u03fe\5`\61\2\u03fd\u03ff\5\u009eP\2\u03fe\u03fd\3\2")
        buf.write("\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0405\3\2\2\2\u0400\u0401")
        buf.write("\5`\61\2\u0401\u0402\7\67\2\2\u0402\u0403\5`\61\2\u0403")
        buf.write("\u0405\3\2\2\2\u0404\u03fc\3\2\2\2\u0404\u0400\3\2\2\2")
        buf.write("\u0405\u009b\3\2\2\2\u0406\u0409\5\u009eP\2\u0407\u0409")
        buf.write("\5\u00a0Q\2\u0408\u0406\3\2\2\2\u0408\u0407\3\2\2\2\u0409")
        buf.write("\u009d\3\2\2\2\u040a\u040b\7\20\2\2\u040b\u040c\5\u0090")
        buf.write("I\2\u040c\u040d\7\21\2\2\u040d\u040f\5h\65\2\u040e\u0410")
        buf.write("\5\u009cO\2\u040f\u040e\3\2\2\2\u040f\u0410\3\2\2\2\u0410")
        buf.write("\u009f\3\2\2\2\u0411\u0412\7\f\2\2\u0412\u0414\5b\62\2")
        buf.write("\u0413\u0415\5\u009cO\2\u0414\u0413\3\2\2\2\u0414\u0415")
        buf.write("\3\2\2\2\u0415\u00a1\3\2\2\2\u0416\u0418\7\37\2\2\u0417")
        buf.write("\u0419\5\u00a4S\2\u0418\u0417\3\2\2\2\u0418\u0419\3\2")
        buf.write("\2\2\u0419\u00a3\3\2\2\2\u041a\u041b\7\6\2\2\u041b\u041e")
        buf.write("\5`\61\2\u041c\u041e\5\u0092J\2\u041d\u041a\3\2\2\2\u041d")
        buf.write("\u041c\3\2\2\2\u041e\u00a5\3\2\2\2\u041f\u0420\t\4\2\2")
        buf.write("\u0420\u00a7\3\2\2\2\u0421\u0425\5\u00aaV\2\u0422\u0425")
        buf.write("\7,\2\2\u0423\u0425\7-\2\2\u0424\u0421\3\2\2\2\u0424\u0422")
        buf.write("\3\2\2\2\u0424\u0423\3\2\2\2\u0425\u00a9\3\2\2\2\u0426")
        buf.write("\u0427\t\5\2\2\u0427\u00ab\3\2\2\2\u0098\u00b1\u00b5\u00b7")
        buf.write("\u00c0\u00c9\u00cc\u00d3\u00d8\u00df\u00e6\u00ed\u00f3")
        buf.write("\u00f7\u00fd\u0103\u0107\u010d\u0111\u0113\u0117\u011d")
        buf.write("\u0121\u0127\u012b\u0130\u0135\u013b\u013f\u0145\u014b")
        buf.write("\u014f\u0155\u0159\u015b\u015f\u0165\u0169\u016f\u0173")
        buf.write("\u0179\u0180\u0184\u0191\u0197\u019c\u01a0\u01a3\u01a7")
        buf.write("\u01ac\u01b0\u01b4\u01c2\u01ca\u01d2\u01d4\u01d8\u01e1")
        buf.write("\u01e8\u01ea\u01f3\u01f8\u01fd\u0204\u0208\u020f\u0217")
        buf.write("\u0220\u022d\u0234\u023e\u024b\u0251\u025a\u0265\u0270")
        buf.write("\u0275\u027a\u027f\u0287\u0290\u0296\u0298\u02a0\u02a4")
        buf.write("\u02ac\u02af\u02b3\u02b7\u02be\u02c8\u02d0\u02d6\u02de")
        buf.write("\u02ee\u02f1\u02fa\u0302\u030a\u0312\u0314\u031c\u031e")
        buf.write("\u032c\u032e\u0338\u033e\u0343\u0348\u034d\u0352\u035a")
        buf.write("\u0360\u0368\u036c\u036e\u0372\u037b\u0382\u0386\u038a")
        buf.write("\u038e\u0391\u0393\u0397\u039e\u03a2\u03a9\u03ad\u03ba")
        buf.write("\u03be\u03c0\u03c8\u03cc\u03ce\u03d0\u03d6\u03d9\u03e3")
        buf.write("\u03e8\u03f0\u03f6\u03fa\u03fe\u0404\u0408\u040f\u0414")
        buf.write("\u0418\u041d\u0424")
        return buf.getvalue()


class ViperParser ( Parser ):

    grammarFileName = "Viper.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'def'", "'return'", "'raise'", "'from'", 
                     "'import'", "'as'", "'global'", "'nonlocal'", "'assert'", 
                     "'if'", "'elif'", "'else'", "'while'", "'for'", "'in'", 
                     "'try'", "'finally'", "'with'", "'except'", "'lambda'", 
                     "'or'", "'and'", "'not'", "'is'", "'None'", "'True'", 
                     "'False'", "'class'", "'yield'", "'del'", "'pass'", 
                     "'continue'", "'break'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'.'", "'...'", "'*'", "'('", "')'", "','", "':'", 
                     "';'", "'**'", "'='", "'['", "']'", "'|'", "'^'", "'&'", 
                     "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", 
                     "'~'", "'{'", "'}'", "'<'", "'>'", "'=='", "'>='", 
                     "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='", 
                     "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", "'^='", 
                     "'<<='", "'>>='", "'**='", "'//='" ]

    symbolicNames = [ "<INVALID>", "DEF", "RETURN", "RAISE", "FROM", "IMPORT", 
                      "AS", "GLOBAL", "NONLOCAL", "ASSERT", "IF", "ELIF", 
                      "ELSE", "WHILE", "FOR", "IN", "TRY", "FINALLY", "WITH", 
                      "EXCEPT", "LAMBDA", "OR", "AND", "NOT", "IS", "NONE", 
                      "TRUE", "FALSE", "CLASS", "YIELD", "DEL", "PASS", 
                      "CONTINUE", "BREAK", "NEWLINE", "NAME", "STRING_LITERAL", 
                      "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", 
                      "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", 
                      "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", 
                      "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", 
                      "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", 
                      "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", 
                      "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", 
                      "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", 
                      "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", 
                      "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR", "INDENT", 
                      "DEDENT" ]

    RULE_single_input = 0
    RULE_file_input = 1
    RULE_eval_input = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_funcdef = 6
    RULE_parameters = 7
    RULE_typedargslist = 8
    RULE_tfpdef = 9
    RULE_varargslist = 10
    RULE_vfpdef = 11
    RULE_stmt = 12
    RULE_simple_stmt = 13
    RULE_small_stmt = 14
    RULE_expr_stmt = 15
    RULE_testlist_star_expr = 16
    RULE_augassign = 17
    RULE_del_stmt = 18
    RULE_pass_stmt = 19
    RULE_flow_stmt = 20
    RULE_break_stmt = 21
    RULE_continue_stmt = 22
    RULE_return_stmt = 23
    RULE_yield_stmt = 24
    RULE_raise_stmt = 25
    RULE_import_stmt = 26
    RULE_import_name = 27
    RULE_import_from = 28
    RULE_import_as_name = 29
    RULE_dotted_as_name = 30
    RULE_import_as_names = 31
    RULE_dotted_as_names = 32
    RULE_dotted_name = 33
    RULE_global_stmt = 34
    RULE_contract_global_stmt = 35
    RULE_nonlocal_stmt = 36
    RULE_assert_stmt = 37
    RULE_compound_stmt = 38
    RULE_if_stmt = 39
    RULE_while_stmt = 40
    RULE_for_stmt = 41
    RULE_try_stmt = 42
    RULE_with_stmt = 43
    RULE_with_item = 44
    RULE_except_clause = 45
    RULE_suite = 46
    RULE_test = 47
    RULE_test_nocond = 48
    RULE_lambdef = 49
    RULE_lambdef_nocond = 50
    RULE_or_test = 51
    RULE_and_test = 52
    RULE_not_test = 53
    RULE_comparison = 54
    RULE_comp_op = 55
    RULE_star_expr = 56
    RULE_expr = 57
    RULE_xor_expr = 58
    RULE_and_expr = 59
    RULE_shift_expr = 60
    RULE_arith_expr = 61
    RULE_term = 62
    RULE_factor = 63
    RULE_power = 64
    RULE_atom = 65
    RULE_testlist_comp = 66
    RULE_trailer = 67
    RULE_subscriptlist = 68
    RULE_subscript = 69
    RULE_sliceop = 70
    RULE_exprlist = 71
    RULE_testlist = 72
    RULE_dictorsetmaker = 73
    RULE_classdef = 74
    RULE_arglist = 75
    RULE_argument = 76
    RULE_comp_iter = 77
    RULE_comp_for = 78
    RULE_comp_if = 79
    RULE_yield_expr = 80
    RULE_yield_arg = 81
    RULE_strr = 82
    RULE_number = 83
    RULE_integer = 84

    ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "funcdef", "parameters", "typedargslist", 
                   "tfpdef", "varargslist", "vfpdef", "stmt", "simple_stmt", 
                   "small_stmt", "expr_stmt", "testlist_star_expr", "augassign", 
                   "del_stmt", "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "contract_global_stmt", "nonlocal_stmt", 
                   "assert_stmt", "compound_stmt", "if_stmt", "while_stmt", 
                   "for_stmt", "try_stmt", "with_stmt", "with_item", "except_clause", 
                   "suite", "test", "test_nocond", "lambdef", "lambdef_nocond", 
                   "or_test", "and_test", "not_test", "comparison", "comp_op", 
                   "star_expr", "expr", "xor_expr", "and_expr", "shift_expr", 
                   "arith_expr", "term", "factor", "power", "atom", "testlist_comp", 
                   "trailer", "subscriptlist", "subscript", "sliceop", "exprlist", 
                   "testlist", "dictorsetmaker", "classdef", "arglist", 
                   "argument", "comp_iter", "comp_for", "comp_if", "yield_expr", 
                   "yield_arg", "strr", "number", "integer" ]

    EOF = Token.EOF
    DEF=1
    RETURN=2
    RAISE=3
    FROM=4
    IMPORT=5
    AS=6
    GLOBAL=7
    NONLOCAL=8
    ASSERT=9
    IF=10
    ELIF=11
    ELSE=12
    WHILE=13
    FOR=14
    IN=15
    TRY=16
    FINALLY=17
    WITH=18
    EXCEPT=19
    LAMBDA=20
    OR=21
    AND=22
    NOT=23
    IS=24
    NONE=25
    TRUE=26
    FALSE=27
    CLASS=28
    YIELD=29
    DEL=30
    PASS=31
    CONTINUE=32
    BREAK=33
    NEWLINE=34
    NAME=35
    STRING_LITERAL=36
    BYTES_LITERAL=37
    DECIMAL_INTEGER=38
    OCT_INTEGER=39
    HEX_INTEGER=40
    BIN_INTEGER=41
    FLOAT_NUMBER=42
    IMAG_NUMBER=43
    DOT=44
    ELLIPSIS=45
    STAR=46
    OPEN_PAREN=47
    CLOSE_PAREN=48
    COMMA=49
    COLON=50
    SEMI_COLON=51
    POWER=52
    ASSIGN=53
    OPEN_BRACK=54
    CLOSE_BRACK=55
    OR_OP=56
    XOR=57
    AND_OP=58
    LEFT_SHIFT=59
    RIGHT_SHIFT=60
    ADD=61
    MINUS=62
    DIV=63
    MOD=64
    IDIV=65
    NOT_OP=66
    OPEN_BRACE=67
    CLOSE_BRACE=68
    LESS_THAN=69
    GREATER_THAN=70
    EQUALS=71
    GT_EQ=72
    LT_EQ=73
    NOT_EQ_1=74
    NOT_EQ_2=75
    AT=76
    ARROW=77
    ADD_ASSIGN=78
    SUB_ASSIGN=79
    MULT_ASSIGN=80
    AT_ASSIGN=81
    DIV_ASSIGN=82
    MOD_ASSIGN=83
    AND_ASSIGN=84
    OR_ASSIGN=85
    XOR_ASSIGN=86
    LEFT_SHIFT_ASSIGN=87
    RIGHT_SHIFT_ASSIGN=88
    POWER_ASSIGN=89
    IDIV_ASSIGN=90
    SKIP_=91
    UNKNOWN_CHAR=92
    INDENT=93
    DEDENT=94

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Single_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(ViperParser.NEWLINE, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(ViperParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(ViperParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)




    def single_input(self):

        localctx = ViperParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_single_input)
        try:
            self.state = 175
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.NEWLINE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 170
                self.match(ViperParser.NEWLINE)
                pass
            elif token in [ViperParser.RETURN, ViperParser.RAISE, ViperParser.FROM, ViperParser.IMPORT, ViperParser.GLOBAL, ViperParser.NONLOCAL, ViperParser.ASSERT, ViperParser.LAMBDA, ViperParser.NOT, ViperParser.NONE, ViperParser.TRUE, ViperParser.FALSE, ViperParser.YIELD, ViperParser.DEL, ViperParser.PASS, ViperParser.CONTINUE, ViperParser.BREAK, ViperParser.NAME, ViperParser.STRING_LITERAL, ViperParser.BYTES_LITERAL, ViperParser.DECIMAL_INTEGER, ViperParser.OCT_INTEGER, ViperParser.HEX_INTEGER, ViperParser.BIN_INTEGER, ViperParser.FLOAT_NUMBER, ViperParser.IMAG_NUMBER, ViperParser.ELLIPSIS, ViperParser.STAR, ViperParser.OPEN_PAREN, ViperParser.OPEN_BRACK, ViperParser.ADD, ViperParser.MINUS, ViperParser.NOT_OP, ViperParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 171
                self.simple_stmt()
                pass
            elif token in [ViperParser.DEF, ViperParser.IF, ViperParser.WHILE, ViperParser.FOR, ViperParser.TRY, ViperParser.WITH, ViperParser.CLASS, ViperParser.AT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 172
                self.compound_stmt()
                self.state = 173
                self.match(ViperParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(ViperParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(ViperParser.NEWLINE)
            else:
                return self.getToken(ViperParser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.StmtContext)
            else:
                return self.getTypedRuleContext(ViperParser.StmtContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)




    def file_input(self):

        localctx = ViperParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ViperParser.DEF) | (1 << ViperParser.RETURN) | (1 << ViperParser.RAISE) | (1 << ViperParser.FROM) | (1 << ViperParser.IMPORT) | (1 << ViperParser.GLOBAL) | (1 << ViperParser.NONLOCAL) | (1 << ViperParser.ASSERT) | (1 << ViperParser.IF) | (1 << ViperParser.WHILE) | (1 << ViperParser.FOR) | (1 << ViperParser.TRY) | (1 << ViperParser.WITH) | (1 << ViperParser.LAMBDA) | (1 << ViperParser.NOT) | (1 << ViperParser.NONE) | (1 << ViperParser.TRUE) | (1 << ViperParser.FALSE) | (1 << ViperParser.CLASS) | (1 << ViperParser.YIELD) | (1 << ViperParser.DEL) | (1 << ViperParser.PASS) | (1 << ViperParser.CONTINUE) | (1 << ViperParser.BREAK) | (1 << ViperParser.NEWLINE) | (1 << ViperParser.NAME) | (1 << ViperParser.STRING_LITERAL) | (1 << ViperParser.BYTES_LITERAL) | (1 << ViperParser.DECIMAL_INTEGER) | (1 << ViperParser.OCT_INTEGER) | (1 << ViperParser.HEX_INTEGER) | (1 << ViperParser.BIN_INTEGER) | (1 << ViperParser.FLOAT_NUMBER) | (1 << ViperParser.IMAG_NUMBER) | (1 << ViperParser.ELLIPSIS) | (1 << ViperParser.STAR) | (1 << ViperParser.OPEN_PAREN) | (1 << ViperParser.OPEN_BRACK) | (1 << ViperParser.ADD) | (1 << ViperParser.MINUS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ViperParser.NOT_OP - 66)) | (1 << (ViperParser.OPEN_BRACE - 66)) | (1 << (ViperParser.AT - 66)))) != 0):
                self.state = 179
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ViperParser.NEWLINE]:
                    self.state = 177
                    self.match(ViperParser.NEWLINE)
                    pass
                elif token in [ViperParser.DEF, ViperParser.RETURN, ViperParser.RAISE, ViperParser.FROM, ViperParser.IMPORT, ViperParser.GLOBAL, ViperParser.NONLOCAL, ViperParser.ASSERT, ViperParser.IF, ViperParser.WHILE, ViperParser.FOR, ViperParser.TRY, ViperParser.WITH, ViperParser.LAMBDA, ViperParser.NOT, ViperParser.NONE, ViperParser.TRUE, ViperParser.FALSE, ViperParser.CLASS, ViperParser.YIELD, ViperParser.DEL, ViperParser.PASS, ViperParser.CONTINUE, ViperParser.BREAK, ViperParser.NAME, ViperParser.STRING_LITERAL, ViperParser.BYTES_LITERAL, ViperParser.DECIMAL_INTEGER, ViperParser.OCT_INTEGER, ViperParser.HEX_INTEGER, ViperParser.BIN_INTEGER, ViperParser.FLOAT_NUMBER, ViperParser.IMAG_NUMBER, ViperParser.ELLIPSIS, ViperParser.STAR, ViperParser.OPEN_PAREN, ViperParser.OPEN_BRACK, ViperParser.ADD, ViperParser.MINUS, ViperParser.NOT_OP, ViperParser.OPEN_BRACE, ViperParser.AT]:
                    self.state = 178
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 183
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 184
            self.match(ViperParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eval_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(ViperParser.TestlistContext,0)


        def EOF(self):
            return self.getToken(ViperParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(ViperParser.NEWLINE)
            else:
                return self.getToken(ViperParser.NEWLINE, i)

        def getRuleIndex(self):
            return ViperParser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)




    def eval_input(self):

        localctx = ViperParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            self.testlist()
            self.state = 190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ViperParser.NEWLINE:
                self.state = 187
                self.match(ViperParser.NEWLINE)
                self.state = 192
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 193
            self.match(ViperParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(ViperParser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(ViperParser.NEWLINE, 0)

        def arglist(self):
            return self.getTypedRuleContext(ViperParser.ArglistContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)




    def decorator(self):

        localctx = ViperParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self.match(ViperParser.AT)
            self.state = 196
            self.dotted_name()
            self.state = 202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.OPEN_PAREN:
                self.state = 197
                self.match(ViperParser.OPEN_PAREN)
                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (ViperParser.LAMBDA - 20)) | (1 << (ViperParser.NOT - 20)) | (1 << (ViperParser.NONE - 20)) | (1 << (ViperParser.TRUE - 20)) | (1 << (ViperParser.FALSE - 20)) | (1 << (ViperParser.NAME - 20)) | (1 << (ViperParser.STRING_LITERAL - 20)) | (1 << (ViperParser.BYTES_LITERAL - 20)) | (1 << (ViperParser.DECIMAL_INTEGER - 20)) | (1 << (ViperParser.OCT_INTEGER - 20)) | (1 << (ViperParser.HEX_INTEGER - 20)) | (1 << (ViperParser.BIN_INTEGER - 20)) | (1 << (ViperParser.FLOAT_NUMBER - 20)) | (1 << (ViperParser.IMAG_NUMBER - 20)) | (1 << (ViperParser.ELLIPSIS - 20)) | (1 << (ViperParser.STAR - 20)) | (1 << (ViperParser.OPEN_PAREN - 20)) | (1 << (ViperParser.POWER - 20)) | (1 << (ViperParser.OPEN_BRACK - 20)) | (1 << (ViperParser.ADD - 20)) | (1 << (ViperParser.MINUS - 20)) | (1 << (ViperParser.NOT_OP - 20)) | (1 << (ViperParser.OPEN_BRACE - 20)))) != 0):
                    self.state = 198
                    self.arglist()


                self.state = 201
                self.match(ViperParser.CLOSE_PAREN)


            self.state = 204
            self.match(ViperParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(ViperParser.DecoratorContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorators" ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorators" ):
                listener.exitDecorators(self)




    def decorators(self):

        localctx = ViperParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 207 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 206
                self.decorator()
                self.state = 209 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ViperParser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(ViperParser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(ViperParser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(ViperParser.FuncdefContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_decorated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorated" ):
                listener.enterDecorated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorated" ):
                listener.exitDecorated(self)




    def decorated(self):

        localctx = ViperParser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self.decorators()
            self.state = 214
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.CLASS]:
                self.state = 212
                self.classdef()
                pass
            elif token in [ViperParser.DEF]:
                self.state = 213
                self.funcdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(ViperParser.DEF, 0)

        def NAME(self):
            return self.getToken(ViperParser.NAME, 0)

        def parameters(self):
            return self.getTypedRuleContext(ViperParser.ParametersContext,0)


        def suite(self):
            return self.getTypedRuleContext(ViperParser.SuiteContext,0)


        def test(self):
            return self.getTypedRuleContext(ViperParser.TestContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)




    def funcdef(self):

        localctx = ViperParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            self.match(ViperParser.DEF)
            self.state = 217
            self.match(ViperParser.NAME)
            self.state = 218
            self.parameters()
            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.ARROW:
                self.state = 219
                self.match(ViperParser.ARROW)
                self.state = 220
                self.test()


            self.state = 223
            self.match(ViperParser.COLON)
            self.state = 224
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedargslist(self):
            return self.getTypedRuleContext(ViperParser.TypedargslistContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)




    def parameters(self):

        localctx = ViperParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.match(ViperParser.OPEN_PAREN)
            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ViperParser.NAME) | (1 << ViperParser.STAR) | (1 << ViperParser.POWER))) != 0):
                self.state = 227
                self.typedargslist()


            self.state = 230
            self.match(ViperParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.TfpdefContext)
            else:
                return self.getTypedRuleContext(ViperParser.TfpdefContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.TestContext)
            else:
                return self.getTypedRuleContext(ViperParser.TestContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)




    def typedargslist(self):

        localctx = ViperParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 297
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 232
                self.tfpdef()
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ViperParser.ASSIGN:
                    self.state = 233
                    self.match(ViperParser.ASSIGN)
                    self.state = 234
                    self.test()


                self.state = 245
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 237
                        self.match(ViperParser.COMMA)
                        self.state = 238
                        self.tfpdef()
                        self.state = 241
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ViperParser.ASSIGN:
                            self.state = 239
                            self.match(ViperParser.ASSIGN)
                            self.state = 240
                            self.test()

                 
                    self.state = 247
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ViperParser.COMMA:
                    self.state = 248
                    self.match(ViperParser.COMMA)
                    self.state = 271
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ViperParser.STAR]:
                        self.state = 249
                        self.match(ViperParser.STAR)
                        self.state = 251
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ViperParser.NAME:
                            self.state = 250
                            self.tfpdef()


                        self.state = 261
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 253
                                self.match(ViperParser.COMMA)
                                self.state = 254
                                self.tfpdef()
                                self.state = 257
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==ViperParser.ASSIGN:
                                    self.state = 255
                                    self.match(ViperParser.ASSIGN)
                                    self.state = 256
                                    self.test()

                         
                            self.state = 263
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

                        self.state = 267
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ViperParser.COMMA:
                            self.state = 264
                            self.match(ViperParser.COMMA)
                            self.state = 265
                            self.match(ViperParser.POWER)
                            self.state = 266
                            self.tfpdef()


                        pass
                    elif token in [ViperParser.POWER]:
                        self.state = 269
                        self.match(ViperParser.POWER)
                        self.state = 270
                        self.tfpdef()
                        pass
                    elif token in [ViperParser.CLOSE_PAREN]:
                        pass
                    else:
                        pass


                pass
            elif token in [ViperParser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 275
                self.match(ViperParser.STAR)
                self.state = 277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ViperParser.NAME:
                    self.state = 276
                    self.tfpdef()


                self.state = 287
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 279
                        self.match(ViperParser.COMMA)
                        self.state = 280
                        self.tfpdef()
                        self.state = 283
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ViperParser.ASSIGN:
                            self.state = 281
                            self.match(ViperParser.ASSIGN)
                            self.state = 282
                            self.test()

                 
                    self.state = 289
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ViperParser.COMMA:
                    self.state = 290
                    self.match(ViperParser.COMMA)
                    self.state = 291
                    self.match(ViperParser.POWER)
                    self.state = 292
                    self.tfpdef()


                pass
            elif token in [ViperParser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 295
                self.match(ViperParser.POWER)
                self.state = 296
                self.tfpdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(ViperParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(ViperParser.TestContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_tfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTfpdef" ):
                listener.enterTfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTfpdef" ):
                listener.exitTfpdef(self)




    def tfpdef(self):

        localctx = ViperParser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(ViperParser.NAME)
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.COLON:
                self.state = 300
                self.match(ViperParser.COLON)
                self.state = 301
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.VfpdefContext)
            else:
                return self.getTypedRuleContext(ViperParser.VfpdefContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.TestContext)
            else:
                return self.getTypedRuleContext(ViperParser.TestContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)




    def varargslist(self):

        localctx = ViperParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.state = 369
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 304
                self.vfpdef()
                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ViperParser.ASSIGN:
                    self.state = 305
                    self.match(ViperParser.ASSIGN)
                    self.state = 306
                    self.test()


                self.state = 317
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 309
                        self.match(ViperParser.COMMA)
                        self.state = 310
                        self.vfpdef()
                        self.state = 313
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ViperParser.ASSIGN:
                            self.state = 311
                            self.match(ViperParser.ASSIGN)
                            self.state = 312
                            self.test()

                 
                    self.state = 319
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ViperParser.COMMA:
                    self.state = 320
                    self.match(ViperParser.COMMA)
                    self.state = 343
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ViperParser.STAR]:
                        self.state = 321
                        self.match(ViperParser.STAR)
                        self.state = 323
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ViperParser.NAME:
                            self.state = 322
                            self.vfpdef()


                        self.state = 333
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 325
                                self.match(ViperParser.COMMA)
                                self.state = 326
                                self.vfpdef()
                                self.state = 329
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==ViperParser.ASSIGN:
                                    self.state = 327
                                    self.match(ViperParser.ASSIGN)
                                    self.state = 328
                                    self.test()

                         
                            self.state = 335
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                        self.state = 339
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ViperParser.COMMA:
                            self.state = 336
                            self.match(ViperParser.COMMA)
                            self.state = 337
                            self.match(ViperParser.POWER)
                            self.state = 338
                            self.vfpdef()


                        pass
                    elif token in [ViperParser.POWER]:
                        self.state = 341
                        self.match(ViperParser.POWER)
                        self.state = 342
                        self.vfpdef()
                        pass
                    elif token in [ViperParser.COLON]:
                        pass
                    else:
                        pass


                pass
            elif token in [ViperParser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 347
                self.match(ViperParser.STAR)
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ViperParser.NAME:
                    self.state = 348
                    self.vfpdef()


                self.state = 359
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 351
                        self.match(ViperParser.COMMA)
                        self.state = 352
                        self.vfpdef()
                        self.state = 355
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ViperParser.ASSIGN:
                            self.state = 353
                            self.match(ViperParser.ASSIGN)
                            self.state = 354
                            self.test()

                 
                    self.state = 361
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ViperParser.COMMA:
                    self.state = 362
                    self.match(ViperParser.COMMA)
                    self.state = 363
                    self.match(ViperParser.POWER)
                    self.state = 364
                    self.vfpdef()


                pass
            elif token in [ViperParser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 367
                self.match(ViperParser.POWER)
                self.state = 368
                self.vfpdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(ViperParser.NAME, 0)

        def getRuleIndex(self):
            return ViperParser.RULE_vfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVfpdef" ):
                listener.enterVfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVfpdef" ):
                listener.exitVfpdef(self)




    def vfpdef(self):

        localctx = ViperParser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_vfpdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.match(ViperParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(ViperParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(ViperParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = ViperParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_stmt)
        try:
            self.state = 375
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.RETURN, ViperParser.RAISE, ViperParser.FROM, ViperParser.IMPORT, ViperParser.GLOBAL, ViperParser.NONLOCAL, ViperParser.ASSERT, ViperParser.LAMBDA, ViperParser.NOT, ViperParser.NONE, ViperParser.TRUE, ViperParser.FALSE, ViperParser.YIELD, ViperParser.DEL, ViperParser.PASS, ViperParser.CONTINUE, ViperParser.BREAK, ViperParser.NAME, ViperParser.STRING_LITERAL, ViperParser.BYTES_LITERAL, ViperParser.DECIMAL_INTEGER, ViperParser.OCT_INTEGER, ViperParser.HEX_INTEGER, ViperParser.BIN_INTEGER, ViperParser.FLOAT_NUMBER, ViperParser.IMAG_NUMBER, ViperParser.ELLIPSIS, ViperParser.STAR, ViperParser.OPEN_PAREN, ViperParser.OPEN_BRACK, ViperParser.ADD, ViperParser.MINUS, ViperParser.NOT_OP, ViperParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 373
                self.simple_stmt()
                pass
            elif token in [ViperParser.DEF, ViperParser.IF, ViperParser.WHILE, ViperParser.FOR, ViperParser.TRY, ViperParser.WITH, ViperParser.CLASS, ViperParser.AT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 374
                self.compound_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(ViperParser.Small_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(ViperParser.NEWLINE, 0)

        def getRuleIndex(self):
            return ViperParser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)




    def simple_stmt(self):

        localctx = ViperParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.small_stmt()
            self.state = 382
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 378
                    self.match(ViperParser.SEMI_COLON)
                    self.state = 379
                    self.small_stmt() 
                self.state = 384
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.SEMI_COLON:
                self.state = 385
                self.match(ViperParser.SEMI_COLON)


            self.state = 388
            self.match(ViperParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Small_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(ViperParser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(ViperParser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(ViperParser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(ViperParser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(ViperParser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(ViperParser.Global_stmtContext,0)


        def contract_global_stmt(self):
            return self.getTypedRuleContext(ViperParser.Contract_global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(ViperParser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(ViperParser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_small_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmall_stmt" ):
                listener.enterSmall_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmall_stmt" ):
                listener.exitSmall_stmt(self)




    def small_stmt(self):

        localctx = ViperParser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_small_stmt)
        try:
            self.state = 399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 390
                self.expr_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 391
                self.del_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 392
                self.pass_stmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 393
                self.flow_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 394
                self.import_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 395
                self.global_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 396
                self.contract_global_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 397
                self.nonlocal_stmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 398
                self.assert_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(ViperParser.Testlist_star_exprContext,i)


        def augassign(self):
            return self.getTypedRuleContext(ViperParser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(ViperParser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(ViperParser.TestlistContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_expr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)




    def expr_stmt(self):

        localctx = ViperParser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.testlist_star_expr()
            self.state = 417
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.ADD_ASSIGN, ViperParser.SUB_ASSIGN, ViperParser.MULT_ASSIGN, ViperParser.AT_ASSIGN, ViperParser.DIV_ASSIGN, ViperParser.MOD_ASSIGN, ViperParser.AND_ASSIGN, ViperParser.OR_ASSIGN, ViperParser.XOR_ASSIGN, ViperParser.LEFT_SHIFT_ASSIGN, ViperParser.RIGHT_SHIFT_ASSIGN, ViperParser.POWER_ASSIGN, ViperParser.IDIV_ASSIGN]:
                self.state = 402
                self.augassign()
                self.state = 405
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ViperParser.YIELD]:
                    self.state = 403
                    self.yield_expr()
                    pass
                elif token in [ViperParser.LAMBDA, ViperParser.NOT, ViperParser.NONE, ViperParser.TRUE, ViperParser.FALSE, ViperParser.NAME, ViperParser.STRING_LITERAL, ViperParser.BYTES_LITERAL, ViperParser.DECIMAL_INTEGER, ViperParser.OCT_INTEGER, ViperParser.HEX_INTEGER, ViperParser.BIN_INTEGER, ViperParser.FLOAT_NUMBER, ViperParser.IMAG_NUMBER, ViperParser.ELLIPSIS, ViperParser.STAR, ViperParser.OPEN_PAREN, ViperParser.OPEN_BRACK, ViperParser.ADD, ViperParser.MINUS, ViperParser.NOT_OP, ViperParser.OPEN_BRACE]:
                    self.state = 404
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [ViperParser.NEWLINE, ViperParser.SEMI_COLON, ViperParser.ASSIGN]:
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ViperParser.ASSIGN:
                    self.state = 407
                    self.match(ViperParser.ASSIGN)
                    self.state = 410
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ViperParser.YIELD]:
                        self.state = 408
                        self.yield_expr()
                        pass
                    elif token in [ViperParser.LAMBDA, ViperParser.NOT, ViperParser.NONE, ViperParser.TRUE, ViperParser.FALSE, ViperParser.NAME, ViperParser.STRING_LITERAL, ViperParser.BYTES_LITERAL, ViperParser.DECIMAL_INTEGER, ViperParser.OCT_INTEGER, ViperParser.HEX_INTEGER, ViperParser.BIN_INTEGER, ViperParser.FLOAT_NUMBER, ViperParser.IMAG_NUMBER, ViperParser.ELLIPSIS, ViperParser.STAR, ViperParser.OPEN_PAREN, ViperParser.OPEN_BRACK, ViperParser.ADD, ViperParser.MINUS, ViperParser.NOT_OP, ViperParser.OPEN_BRACE]:
                        self.state = 409
                        self.testlist_star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.TestContext)
            else:
                return self.getTypedRuleContext(ViperParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(ViperParser.Star_exprContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)




    def testlist_star_expr(self):

        localctx = ViperParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 419
                self.test()
                pass

            elif la_ == 2:
                self.state = 420
                self.star_expr()
                pass


            self.state = 430
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 423
                    self.match(ViperParser.COMMA)
                    self.state = 426
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                    if la_ == 1:
                        self.state = 424
                        self.test()
                        pass

                    elif la_ == 2:
                        self.state = 425
                        self.star_expr()
                        pass

             
                self.state = 432
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.COMMA:
                self.state = 433
                self.match(ViperParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ViperParser.RULE_augassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugassign" ):
                listener.enterAugassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugassign" ):
                listener.exitAugassign(self)




    def augassign(self):

        localctx = ViperParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            _la = self._input.LA(1)
            if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (ViperParser.ADD_ASSIGN - 78)) | (1 << (ViperParser.SUB_ASSIGN - 78)) | (1 << (ViperParser.MULT_ASSIGN - 78)) | (1 << (ViperParser.AT_ASSIGN - 78)) | (1 << (ViperParser.DIV_ASSIGN - 78)) | (1 << (ViperParser.MOD_ASSIGN - 78)) | (1 << (ViperParser.AND_ASSIGN - 78)) | (1 << (ViperParser.OR_ASSIGN - 78)) | (1 << (ViperParser.XOR_ASSIGN - 78)) | (1 << (ViperParser.LEFT_SHIFT_ASSIGN - 78)) | (1 << (ViperParser.RIGHT_SHIFT_ASSIGN - 78)) | (1 << (ViperParser.POWER_ASSIGN - 78)) | (1 << (ViperParser.IDIV_ASSIGN - 78)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(ViperParser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(ViperParser.ExprlistContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_del_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)




    def del_stmt(self):

        localctx = ViperParser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(ViperParser.DEL)
            self.state = 439
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pass_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(ViperParser.PASS, 0)

        def getRuleIndex(self):
            return ViperParser.RULE_pass_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)




    def pass_stmt(self):

        localctx = ViperParser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.match(ViperParser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flow_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(ViperParser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(ViperParser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(ViperParser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(ViperParser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(ViperParser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_flow_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)




    def flow_stmt(self):

        localctx = ViperParser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_flow_stmt)
        try:
            self.state = 448
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 443
                self.break_stmt()
                pass
            elif token in [ViperParser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 444
                self.continue_stmt()
                pass
            elif token in [ViperParser.RETURN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 445
                self.return_stmt()
                pass
            elif token in [ViperParser.RAISE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 446
                self.raise_stmt()
                pass
            elif token in [ViperParser.YIELD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 447
                self.yield_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(ViperParser.BREAK, 0)

        def getRuleIndex(self):
            return ViperParser.RULE_break_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)




    def break_stmt(self):

        localctx = ViperParser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.match(ViperParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(ViperParser.CONTINUE, 0)

        def getRuleIndex(self):
            return ViperParser.RULE_continue_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)




    def continue_stmt(self):

        localctx = ViperParser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.match(ViperParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(ViperParser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(ViperParser.TestlistContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)




    def return_stmt(self):

        localctx = ViperParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.match(ViperParser.RETURN)
            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (ViperParser.LAMBDA - 20)) | (1 << (ViperParser.NOT - 20)) | (1 << (ViperParser.NONE - 20)) | (1 << (ViperParser.TRUE - 20)) | (1 << (ViperParser.FALSE - 20)) | (1 << (ViperParser.NAME - 20)) | (1 << (ViperParser.STRING_LITERAL - 20)) | (1 << (ViperParser.BYTES_LITERAL - 20)) | (1 << (ViperParser.DECIMAL_INTEGER - 20)) | (1 << (ViperParser.OCT_INTEGER - 20)) | (1 << (ViperParser.HEX_INTEGER - 20)) | (1 << (ViperParser.BIN_INTEGER - 20)) | (1 << (ViperParser.FLOAT_NUMBER - 20)) | (1 << (ViperParser.IMAG_NUMBER - 20)) | (1 << (ViperParser.ELLIPSIS - 20)) | (1 << (ViperParser.STAR - 20)) | (1 << (ViperParser.OPEN_PAREN - 20)) | (1 << (ViperParser.OPEN_BRACK - 20)) | (1 << (ViperParser.ADD - 20)) | (1 << (ViperParser.MINUS - 20)) | (1 << (ViperParser.NOT_OP - 20)) | (1 << (ViperParser.OPEN_BRACE - 20)))) != 0):
                self.state = 455
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(ViperParser.Yield_exprContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_yield_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)




    def yield_stmt(self):

        localctx = ViperParser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(ViperParser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.TestContext)
            else:
                return self.getTypedRuleContext(ViperParser.TestContext,i)


        def FROM(self):
            return self.getToken(ViperParser.FROM, 0)

        def getRuleIndex(self):
            return ViperParser.RULE_raise_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)




    def raise_stmt(self):

        localctx = ViperParser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.match(ViperParser.RAISE)
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (ViperParser.LAMBDA - 20)) | (1 << (ViperParser.NOT - 20)) | (1 << (ViperParser.NONE - 20)) | (1 << (ViperParser.TRUE - 20)) | (1 << (ViperParser.FALSE - 20)) | (1 << (ViperParser.NAME - 20)) | (1 << (ViperParser.STRING_LITERAL - 20)) | (1 << (ViperParser.BYTES_LITERAL - 20)) | (1 << (ViperParser.DECIMAL_INTEGER - 20)) | (1 << (ViperParser.OCT_INTEGER - 20)) | (1 << (ViperParser.HEX_INTEGER - 20)) | (1 << (ViperParser.BIN_INTEGER - 20)) | (1 << (ViperParser.FLOAT_NUMBER - 20)) | (1 << (ViperParser.IMAG_NUMBER - 20)) | (1 << (ViperParser.ELLIPSIS - 20)) | (1 << (ViperParser.STAR - 20)) | (1 << (ViperParser.OPEN_PAREN - 20)) | (1 << (ViperParser.OPEN_BRACK - 20)) | (1 << (ViperParser.ADD - 20)) | (1 << (ViperParser.MINUS - 20)) | (1 << (ViperParser.NOT_OP - 20)) | (1 << (ViperParser.OPEN_BRACE - 20)))) != 0):
                self.state = 461
                self.test()
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ViperParser.FROM:
                    self.state = 462
                    self.match(ViperParser.FROM)
                    self.state = 463
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(ViperParser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(ViperParser.Import_fromContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_import_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)




    def import_stmt(self):

        localctx = ViperParser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_import_stmt)
        try:
            self.state = 470
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 468
                self.import_name()
                pass
            elif token in [ViperParser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 469
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(ViperParser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(ViperParser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_import_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_name" ):
                listener.enterImport_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_name" ):
                listener.exitImport_name(self)




    def import_name(self):

        localctx = ViperParser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.match(ViperParser.IMPORT)
            self.state = 473
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(ViperParser.FROM, 0)

        def IMPORT(self):
            return self.getToken(ViperParser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(ViperParser.Dotted_nameContext,0)


        def import_as_names(self):
            return self.getTypedRuleContext(ViperParser.Import_as_namesContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_import_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_from" ):
                listener.enterImport_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_from" ):
                listener.exitImport_from(self)




    def import_from(self):

        localctx = ViperParser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(ViperParser.FROM)
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ViperParser.DOT or _la==ViperParser.ELLIPSIS:
                    self.state = 476
                    _la = self._input.LA(1)
                    if not(_la==ViperParser.DOT or _la==ViperParser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 481
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 482
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 484 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 483
                    _la = self._input.LA(1)
                    if not(_la==ViperParser.DOT or _la==ViperParser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 486 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==ViperParser.DOT or _la==ViperParser.ELLIPSIS):
                        break

                pass


            self.state = 490
            self.match(ViperParser.IMPORT)
            self.state = 497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.STAR]:
                self.state = 491
                self.match(ViperParser.STAR)
                pass
            elif token in [ViperParser.OPEN_PAREN]:
                self.state = 492
                self.match(ViperParser.OPEN_PAREN)
                self.state = 493
                self.import_as_names()
                self.state = 494
                self.match(ViperParser.CLOSE_PAREN)
                pass
            elif token in [ViperParser.NAME]:
                self.state = 496
                self.import_as_names()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(ViperParser.NAME)
            else:
                return self.getToken(ViperParser.NAME, i)

        def AS(self):
            return self.getToken(ViperParser.AS, 0)

        def getRuleIndex(self):
            return ViperParser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)




    def import_as_name(self):

        localctx = ViperParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.match(ViperParser.NAME)
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.AS:
                self.state = 500
                self.match(ViperParser.AS)
                self.state = 501
                self.match(ViperParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(ViperParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(ViperParser.AS, 0)

        def NAME(self):
            return self.getToken(ViperParser.NAME, 0)

        def getRuleIndex(self):
            return ViperParser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)




    def dotted_as_name(self):

        localctx = ViperParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.dotted_name()
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.AS:
                self.state = 505
                self.match(ViperParser.AS)
                self.state = 506
                self.match(ViperParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(ViperParser.Import_as_nameContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)




    def import_as_names(self):

        localctx = ViperParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.import_as_name()
            self.state = 514
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 510
                    self.match(ViperParser.COMMA)
                    self.state = 511
                    self.import_as_name() 
                self.state = 516
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.COMMA:
                self.state = 517
                self.match(ViperParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(ViperParser.Dotted_as_nameContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)




    def dotted_as_names(self):

        localctx = ViperParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.dotted_as_name()
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ViperParser.COMMA:
                self.state = 521
                self.match(ViperParser.COMMA)
                self.state = 522
                self.dotted_as_name()
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(ViperParser.NAME)
            else:
                return self.getToken(ViperParser.NAME, i)

        def getRuleIndex(self):
            return ViperParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)




    def dotted_name(self):

        localctx = ViperParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.match(ViperParser.NAME)
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ViperParser.DOT:
                self.state = 529
                self.match(ViperParser.DOT)
                self.state = 530
                self.match(ViperParser.NAME)
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(ViperParser.GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(ViperParser.NAME)
            else:
                return self.getToken(ViperParser.NAME, i)

        def getRuleIndex(self):
            return ViperParser.RULE_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)




    def global_stmt(self):

        localctx = ViperParser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.match(ViperParser.GLOBAL)
            self.state = 537
            self.match(ViperParser.NAME)
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ViperParser.COMMA:
                self.state = 538
                self.match(ViperParser.COMMA)
                self.state = 539
                self.match(ViperParser.NAME)
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Contract_global_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(ViperParser.NAME, 0)

        def expr_stmt(self):
            return self.getTypedRuleContext(ViperParser.Expr_stmtContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_contract_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContract_global_stmt" ):
                listener.enterContract_global_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContract_global_stmt" ):
                listener.exitContract_global_stmt(self)




    def contract_global_stmt(self):

        localctx = ViperParser.Contract_global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_contract_global_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(ViperParser.NAME)
            self.state = 546
            self.match(ViperParser.COLON)
            self.state = 547
            self.expr_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nonlocal_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(ViperParser.NONLOCAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(ViperParser.NAME)
            else:
                return self.getToken(ViperParser.NAME, i)

        def getRuleIndex(self):
            return ViperParser.RULE_nonlocal_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)




    def nonlocal_stmt(self):

        localctx = ViperParser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.match(ViperParser.NONLOCAL)
            self.state = 550
            self.match(ViperParser.NAME)
            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ViperParser.COMMA:
                self.state = 551
                self.match(ViperParser.COMMA)
                self.state = 552
                self.match(ViperParser.NAME)
                self.state = 557
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(ViperParser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.TestContext)
            else:
                return self.getTypedRuleContext(ViperParser.TestContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_assert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)




    def assert_stmt(self):

        localctx = ViperParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.match(ViperParser.ASSERT)
            self.state = 559
            self.test()
            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.COMMA:
                self.state = 560
                self.match(ViperParser.COMMA)
                self.state = 561
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_stmt(self):
            return self.getTypedRuleContext(ViperParser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(ViperParser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(ViperParser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(ViperParser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(ViperParser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(ViperParser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(ViperParser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(ViperParser.DecoratedContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_compound_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stmt" ):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stmt" ):
                listener.exitCompound_stmt(self)




    def compound_stmt(self):

        localctx = ViperParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_compound_stmt)
        try:
            self.state = 572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 564
                self.if_stmt()
                pass
            elif token in [ViperParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 565
                self.while_stmt()
                pass
            elif token in [ViperParser.FOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 566
                self.for_stmt()
                pass
            elif token in [ViperParser.TRY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 567
                self.try_stmt()
                pass
            elif token in [ViperParser.WITH]:
                self.enterOuterAlt(localctx, 5)
                self.state = 568
                self.with_stmt()
                pass
            elif token in [ViperParser.DEF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 569
                self.funcdef()
                pass
            elif token in [ViperParser.CLASS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 570
                self.classdef()
                pass
            elif token in [ViperParser.AT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 571
                self.decorated()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ViperParser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.TestContext)
            else:
                return self.getTypedRuleContext(ViperParser.TestContext,i)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.SuiteContext)
            else:
                return self.getTypedRuleContext(ViperParser.SuiteContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(ViperParser.ELIF)
            else:
                return self.getToken(ViperParser.ELIF, i)

        def ELSE(self):
            return self.getToken(ViperParser.ELSE, 0)

        def getRuleIndex(self):
            return ViperParser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)




    def if_stmt(self):

        localctx = ViperParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.match(ViperParser.IF)
            self.state = 575
            self.test()
            self.state = 576
            self.match(ViperParser.COLON)
            self.state = 577
            self.suite()
            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ViperParser.ELIF:
                self.state = 578
                self.match(ViperParser.ELIF)
                self.state = 579
                self.test()
                self.state = 580
                self.match(ViperParser.COLON)
                self.state = 581
                self.suite()
                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.ELSE:
                self.state = 588
                self.match(ViperParser.ELSE)
                self.state = 589
                self.match(ViperParser.COLON)
                self.state = 590
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(ViperParser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(ViperParser.TestContext,0)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.SuiteContext)
            else:
                return self.getTypedRuleContext(ViperParser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(ViperParser.ELSE, 0)

        def getRuleIndex(self):
            return ViperParser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)




    def while_stmt(self):

        localctx = ViperParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.match(ViperParser.WHILE)
            self.state = 594
            self.test()
            self.state = 595
            self.match(ViperParser.COLON)
            self.state = 596
            self.suite()
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.ELSE:
                self.state = 597
                self.match(ViperParser.ELSE)
                self.state = 598
                self.match(ViperParser.COLON)
                self.state = 599
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(ViperParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(ViperParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(ViperParser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(ViperParser.TestlistContext,0)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.SuiteContext)
            else:
                return self.getTypedRuleContext(ViperParser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(ViperParser.ELSE, 0)

        def getRuleIndex(self):
            return ViperParser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)




    def for_stmt(self):

        localctx = ViperParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.match(ViperParser.FOR)
            self.state = 603
            self.exprlist()
            self.state = 604
            self.match(ViperParser.IN)
            self.state = 605
            self.testlist()
            self.state = 606
            self.match(ViperParser.COLON)
            self.state = 607
            self.suite()
            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.ELSE:
                self.state = 608
                self.match(ViperParser.ELSE)
                self.state = 609
                self.match(ViperParser.COLON)
                self.state = 610
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(ViperParser.TRY, 0)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.SuiteContext)
            else:
                return self.getTypedRuleContext(ViperParser.SuiteContext,i)


        def FINALLY(self):
            return self.getToken(ViperParser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(ViperParser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(ViperParser.ELSE, 0)

        def getRuleIndex(self):
            return ViperParser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)




    def try_stmt(self):

        localctx = ViperParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.match(ViperParser.TRY)
            self.state = 614
            self.match(ViperParser.COLON)
            self.state = 615
            self.suite()
            self.state = 637
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.EXCEPT]:
                self.state = 620 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 616
                    self.except_clause()
                    self.state = 617
                    self.match(ViperParser.COLON)
                    self.state = 618
                    self.suite()
                    self.state = 622 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==ViperParser.EXCEPT):
                        break

                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ViperParser.ELSE:
                    self.state = 624
                    self.match(ViperParser.ELSE)
                    self.state = 625
                    self.match(ViperParser.COLON)
                    self.state = 626
                    self.suite()


                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ViperParser.FINALLY:
                    self.state = 629
                    self.match(ViperParser.FINALLY)
                    self.state = 630
                    self.match(ViperParser.COLON)
                    self.state = 631
                    self.suite()


                pass
            elif token in [ViperParser.FINALLY]:
                self.state = 634
                self.match(ViperParser.FINALLY)
                self.state = 635
                self.match(ViperParser.COLON)
                self.state = 636
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(ViperParser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.With_itemContext)
            else:
                return self.getTypedRuleContext(ViperParser.With_itemContext,i)


        def suite(self):
            return self.getTypedRuleContext(ViperParser.SuiteContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_with_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)




    def with_stmt(self):

        localctx = ViperParser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(ViperParser.WITH)
            self.state = 640
            self.with_item()
            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ViperParser.COMMA:
                self.state = 641
                self.match(ViperParser.COMMA)
                self.state = 642
                self.with_item()
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 648
            self.match(ViperParser.COLON)
            self.state = 649
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(ViperParser.TestContext,0)


        def AS(self):
            return self.getToken(ViperParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(ViperParser.ExprContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)




    def with_item(self):

        localctx = ViperParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.test()
            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.AS:
                self.state = 652
                self.match(ViperParser.AS)
                self.state = 653
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(ViperParser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(ViperParser.TestContext,0)


        def AS(self):
            return self.getToken(ViperParser.AS, 0)

        def NAME(self):
            return self.getToken(ViperParser.NAME, 0)

        def getRuleIndex(self):
            return ViperParser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)




    def except_clause(self):

        localctx = ViperParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(ViperParser.EXCEPT)
            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (ViperParser.LAMBDA - 20)) | (1 << (ViperParser.NOT - 20)) | (1 << (ViperParser.NONE - 20)) | (1 << (ViperParser.TRUE - 20)) | (1 << (ViperParser.FALSE - 20)) | (1 << (ViperParser.NAME - 20)) | (1 << (ViperParser.STRING_LITERAL - 20)) | (1 << (ViperParser.BYTES_LITERAL - 20)) | (1 << (ViperParser.DECIMAL_INTEGER - 20)) | (1 << (ViperParser.OCT_INTEGER - 20)) | (1 << (ViperParser.HEX_INTEGER - 20)) | (1 << (ViperParser.BIN_INTEGER - 20)) | (1 << (ViperParser.FLOAT_NUMBER - 20)) | (1 << (ViperParser.IMAG_NUMBER - 20)) | (1 << (ViperParser.ELLIPSIS - 20)) | (1 << (ViperParser.STAR - 20)) | (1 << (ViperParser.OPEN_PAREN - 20)) | (1 << (ViperParser.OPEN_BRACK - 20)) | (1 << (ViperParser.ADD - 20)) | (1 << (ViperParser.MINUS - 20)) | (1 << (ViperParser.NOT_OP - 20)) | (1 << (ViperParser.OPEN_BRACE - 20)))) != 0):
                self.state = 657
                self.test()
                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ViperParser.AS:
                    self.state = 658
                    self.match(ViperParser.AS)
                    self.state = 659
                    self.match(ViperParser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuiteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(ViperParser.Simple_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(ViperParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(ViperParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(ViperParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.StmtContext)
            else:
                return self.getTypedRuleContext(ViperParser.StmtContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuite" ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuite" ):
                listener.exitSuite(self)




    def suite(self):

        localctx = ViperParser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_suite)
        self._la = 0 # Token type
        try:
            self.state = 674
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.RETURN, ViperParser.RAISE, ViperParser.FROM, ViperParser.IMPORT, ViperParser.GLOBAL, ViperParser.NONLOCAL, ViperParser.ASSERT, ViperParser.LAMBDA, ViperParser.NOT, ViperParser.NONE, ViperParser.TRUE, ViperParser.FALSE, ViperParser.YIELD, ViperParser.DEL, ViperParser.PASS, ViperParser.CONTINUE, ViperParser.BREAK, ViperParser.NAME, ViperParser.STRING_LITERAL, ViperParser.BYTES_LITERAL, ViperParser.DECIMAL_INTEGER, ViperParser.OCT_INTEGER, ViperParser.HEX_INTEGER, ViperParser.BIN_INTEGER, ViperParser.FLOAT_NUMBER, ViperParser.IMAG_NUMBER, ViperParser.ELLIPSIS, ViperParser.STAR, ViperParser.OPEN_PAREN, ViperParser.OPEN_BRACK, ViperParser.ADD, ViperParser.MINUS, ViperParser.NOT_OP, ViperParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 664
                self.simple_stmt()
                pass
            elif token in [ViperParser.NEWLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 665
                self.match(ViperParser.NEWLINE)
                self.state = 666
                self.match(ViperParser.INDENT)
                self.state = 668 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 667
                    self.stmt()
                    self.state = 670 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ViperParser.DEF) | (1 << ViperParser.RETURN) | (1 << ViperParser.RAISE) | (1 << ViperParser.FROM) | (1 << ViperParser.IMPORT) | (1 << ViperParser.GLOBAL) | (1 << ViperParser.NONLOCAL) | (1 << ViperParser.ASSERT) | (1 << ViperParser.IF) | (1 << ViperParser.WHILE) | (1 << ViperParser.FOR) | (1 << ViperParser.TRY) | (1 << ViperParser.WITH) | (1 << ViperParser.LAMBDA) | (1 << ViperParser.NOT) | (1 << ViperParser.NONE) | (1 << ViperParser.TRUE) | (1 << ViperParser.FALSE) | (1 << ViperParser.CLASS) | (1 << ViperParser.YIELD) | (1 << ViperParser.DEL) | (1 << ViperParser.PASS) | (1 << ViperParser.CONTINUE) | (1 << ViperParser.BREAK) | (1 << ViperParser.NAME) | (1 << ViperParser.STRING_LITERAL) | (1 << ViperParser.BYTES_LITERAL) | (1 << ViperParser.DECIMAL_INTEGER) | (1 << ViperParser.OCT_INTEGER) | (1 << ViperParser.HEX_INTEGER) | (1 << ViperParser.BIN_INTEGER) | (1 << ViperParser.FLOAT_NUMBER) | (1 << ViperParser.IMAG_NUMBER) | (1 << ViperParser.ELLIPSIS) | (1 << ViperParser.STAR) | (1 << ViperParser.OPEN_PAREN) | (1 << ViperParser.OPEN_BRACK) | (1 << ViperParser.ADD) | (1 << ViperParser.MINUS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ViperParser.NOT_OP - 66)) | (1 << (ViperParser.OPEN_BRACE - 66)) | (1 << (ViperParser.AT - 66)))) != 0)):
                        break

                self.state = 672
                self.match(ViperParser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.Or_testContext)
            else:
                return self.getTypedRuleContext(ViperParser.Or_testContext,i)


        def IF(self):
            return self.getToken(ViperParser.IF, 0)

        def ELSE(self):
            return self.getToken(ViperParser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(ViperParser.TestContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(ViperParser.LambdefContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)




    def test(self):

        localctx = ViperParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 685
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.NOT, ViperParser.NONE, ViperParser.TRUE, ViperParser.FALSE, ViperParser.NAME, ViperParser.STRING_LITERAL, ViperParser.BYTES_LITERAL, ViperParser.DECIMAL_INTEGER, ViperParser.OCT_INTEGER, ViperParser.HEX_INTEGER, ViperParser.BIN_INTEGER, ViperParser.FLOAT_NUMBER, ViperParser.IMAG_NUMBER, ViperParser.ELLIPSIS, ViperParser.STAR, ViperParser.OPEN_PAREN, ViperParser.OPEN_BRACK, ViperParser.ADD, ViperParser.MINUS, ViperParser.NOT_OP, ViperParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 676
                self.or_test()
                self.state = 682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ViperParser.IF:
                    self.state = 677
                    self.match(ViperParser.IF)
                    self.state = 678
                    self.or_test()
                    self.state = 679
                    self.match(ViperParser.ELSE)
                    self.state = 680
                    self.test()


                pass
            elif token in [ViperParser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 684
                self.lambdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(ViperParser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(ViperParser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_test_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_nocond" ):
                listener.enterTest_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_nocond" ):
                listener.exitTest_nocond(self)




    def test_nocond(self):

        localctx = ViperParser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_test_nocond)
        try:
            self.state = 689
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.NOT, ViperParser.NONE, ViperParser.TRUE, ViperParser.FALSE, ViperParser.NAME, ViperParser.STRING_LITERAL, ViperParser.BYTES_LITERAL, ViperParser.DECIMAL_INTEGER, ViperParser.OCT_INTEGER, ViperParser.HEX_INTEGER, ViperParser.BIN_INTEGER, ViperParser.FLOAT_NUMBER, ViperParser.IMAG_NUMBER, ViperParser.ELLIPSIS, ViperParser.STAR, ViperParser.OPEN_PAREN, ViperParser.OPEN_BRACK, ViperParser.ADD, ViperParser.MINUS, ViperParser.NOT_OP, ViperParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 687
                self.or_test()
                pass
            elif token in [ViperParser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 688
                self.lambdef_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(ViperParser.LAMBDA, 0)

        def test(self):
            return self.getTypedRuleContext(ViperParser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(ViperParser.VarargslistContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_lambdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef" ):
                listener.enterLambdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef" ):
                listener.exitLambdef(self)




    def lambdef(self):

        localctx = ViperParser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(ViperParser.LAMBDA)
            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ViperParser.NAME) | (1 << ViperParser.STAR) | (1 << ViperParser.POWER))) != 0):
                self.state = 692
                self.varargslist()


            self.state = 695
            self.match(ViperParser.COLON)
            self.state = 696
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambdef_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(ViperParser.LAMBDA, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(ViperParser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(ViperParser.VarargslistContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_lambdef_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef_nocond" ):
                listener.enterLambdef_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef_nocond" ):
                listener.exitLambdef_nocond(self)




    def lambdef_nocond(self):

        localctx = ViperParser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.match(ViperParser.LAMBDA)
            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ViperParser.NAME) | (1 << ViperParser.STAR) | (1 << ViperParser.POWER))) != 0):
                self.state = 699
                self.varargslist()


            self.state = 702
            self.match(ViperParser.COLON)
            self.state = 703
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.And_testContext)
            else:
                return self.getTypedRuleContext(ViperParser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(ViperParser.OR)
            else:
                return self.getToken(ViperParser.OR, i)

        def getRuleIndex(self):
            return ViperParser.RULE_or_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_test" ):
                listener.enterOr_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_test" ):
                listener.exitOr_test(self)




    def or_test(self):

        localctx = ViperParser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_or_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.and_test()
            self.state = 710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ViperParser.OR:
                self.state = 706
                self.match(ViperParser.OR)
                self.state = 707
                self.and_test()
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.Not_testContext)
            else:
                return self.getTypedRuleContext(ViperParser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(ViperParser.AND)
            else:
                return self.getToken(ViperParser.AND, i)

        def getRuleIndex(self):
            return ViperParser.RULE_and_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_test" ):
                listener.enterAnd_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_test" ):
                listener.exitAnd_test(self)




    def and_test(self):

        localctx = ViperParser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_and_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.not_test()
            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ViperParser.AND:
                self.state = 714
                self.match(ViperParser.AND)
                self.state = 715
                self.not_test()
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(ViperParser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(ViperParser.Not_testContext,0)


        def comparison(self):
            return self.getTypedRuleContext(ViperParser.ComparisonContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_not_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_test" ):
                listener.enterNot_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_test" ):
                listener.exitNot_test(self)




    def not_test(self):

        localctx = ViperParser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_not_test)
        try:
            self.state = 724
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 721
                self.match(ViperParser.NOT)
                self.state = 722
                self.not_test()
                pass
            elif token in [ViperParser.NONE, ViperParser.TRUE, ViperParser.FALSE, ViperParser.NAME, ViperParser.STRING_LITERAL, ViperParser.BYTES_LITERAL, ViperParser.DECIMAL_INTEGER, ViperParser.OCT_INTEGER, ViperParser.HEX_INTEGER, ViperParser.BIN_INTEGER, ViperParser.FLOAT_NUMBER, ViperParser.IMAG_NUMBER, ViperParser.ELLIPSIS, ViperParser.STAR, ViperParser.OPEN_PAREN, ViperParser.OPEN_BRACK, ViperParser.ADD, ViperParser.MINUS, ViperParser.NOT_OP, ViperParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 723
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(ViperParser.Star_exprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.Comp_opContext)
            else:
                return self.getTypedRuleContext(ViperParser.Comp_opContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = ViperParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.star_expr()
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 15)) & ~0x3f) == 0 and ((1 << (_la - 15)) & ((1 << (ViperParser.IN - 15)) | (1 << (ViperParser.NOT - 15)) | (1 << (ViperParser.IS - 15)) | (1 << (ViperParser.LESS_THAN - 15)) | (1 << (ViperParser.GREATER_THAN - 15)) | (1 << (ViperParser.EQUALS - 15)) | (1 << (ViperParser.GT_EQ - 15)) | (1 << (ViperParser.LT_EQ - 15)) | (1 << (ViperParser.NOT_EQ_1 - 15)) | (1 << (ViperParser.NOT_EQ_2 - 15)))) != 0):
                self.state = 727
                self.comp_op()
                self.state = 728
                self.star_expr()
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(ViperParser.IN, 0)

        def NOT(self):
            return self.getToken(ViperParser.NOT, 0)

        def IS(self):
            return self.getToken(ViperParser.IS, 0)

        def getRuleIndex(self):
            return ViperParser.RULE_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_op" ):
                listener.enterComp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_op" ):
                listener.exitComp_op(self)




    def comp_op(self):

        localctx = ViperParser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_comp_op)
        try:
            self.state = 748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 735
                self.match(ViperParser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 736
                self.match(ViperParser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 737
                self.match(ViperParser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 738
                self.match(ViperParser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 739
                self.match(ViperParser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 740
                self.match(ViperParser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 741
                self.match(ViperParser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 742
                self.match(ViperParser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 743
                self.match(ViperParser.NOT)
                self.state = 744
                self.match(ViperParser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 745
                self.match(ViperParser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 746
                self.match(ViperParser.IS)
                self.state = 747
                self.match(ViperParser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ViperParser.ExprContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)




    def star_expr(self):

        localctx = ViperParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.STAR:
                self.state = 750
                self.match(ViperParser.STAR)


            self.state = 753
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xor_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.Xor_exprContext)
            else:
                return self.getTypedRuleContext(ViperParser.Xor_exprContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = ViperParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.xor_expr()
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ViperParser.OR_OP:
                self.state = 756
                self.match(ViperParser.OR_OP)
                self.state = 757
                self.xor_expr()
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xor_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.And_exprContext)
            else:
                return self.getTypedRuleContext(ViperParser.And_exprContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_xor_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXor_expr" ):
                listener.enterXor_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXor_expr" ):
                listener.exitXor_expr(self)




    def xor_expr(self):

        localctx = ViperParser.Xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_xor_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.and_expr()
            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ViperParser.XOR:
                self.state = 764
                self.match(ViperParser.XOR)
                self.state = 765
                self.and_expr()
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.Shift_exprContext)
            else:
                return self.getTypedRuleContext(ViperParser.Shift_exprContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_and_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expr" ):
                listener.enterAnd_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expr" ):
                listener.exitAnd_expr(self)




    def and_expr(self):

        localctx = ViperParser.And_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_and_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.shift_expr()
            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ViperParser.AND_OP:
                self.state = 772
                self.match(ViperParser.AND_OP)
                self.state = 773
                self.shift_expr()
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shift_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arith_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.Arith_exprContext)
            else:
                return self.getTypedRuleContext(ViperParser.Arith_exprContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_shift_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expr" ):
                listener.enterShift_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expr" ):
                listener.exitShift_expr(self)




    def shift_expr(self):

        localctx = ViperParser.Shift_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_shift_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.arith_expr()
            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ViperParser.LEFT_SHIFT or _la==ViperParser.RIGHT_SHIFT:
                self.state = 784
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ViperParser.LEFT_SHIFT]:
                    self.state = 780
                    self.match(ViperParser.LEFT_SHIFT)
                    self.state = 781
                    self.arith_expr()
                    pass
                elif token in [ViperParser.RIGHT_SHIFT]:
                    self.state = 782
                    self.match(ViperParser.RIGHT_SHIFT)
                    self.state = 783
                    self.arith_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arith_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.TermContext)
            else:
                return self.getTypedRuleContext(ViperParser.TermContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)




    def arith_expr(self):

        localctx = ViperParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.term()
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ViperParser.ADD or _la==ViperParser.MINUS:
                self.state = 794
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ViperParser.ADD]:
                    self.state = 790
                    self.match(ViperParser.ADD)
                    self.state = 791
                    self.term()
                    pass
                elif token in [ViperParser.MINUS]:
                    self.state = 792
                    self.match(ViperParser.MINUS)
                    self.state = 793
                    self.term()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.FactorContext)
            else:
                return self.getTypedRuleContext(ViperParser.FactorContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = ViperParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.factor()
            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & ((1 << (ViperParser.STAR - 46)) | (1 << (ViperParser.DIV - 46)) | (1 << (ViperParser.MOD - 46)) | (1 << (ViperParser.IDIV - 46)) | (1 << (ViperParser.AT - 46)))) != 0):
                self.state = 810
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ViperParser.STAR]:
                    self.state = 800
                    self.match(ViperParser.STAR)
                    self.state = 801
                    self.factor()
                    pass
                elif token in [ViperParser.DIV]:
                    self.state = 802
                    self.match(ViperParser.DIV)
                    self.state = 803
                    self.factor()
                    pass
                elif token in [ViperParser.MOD]:
                    self.state = 804
                    self.match(ViperParser.MOD)
                    self.state = 805
                    self.factor()
                    pass
                elif token in [ViperParser.IDIV]:
                    self.state = 806
                    self.match(ViperParser.IDIV)
                    self.state = 807
                    self.factor()
                    pass
                elif token in [ViperParser.AT]:
                    self.state = 808
                    self.match(ViperParser.AT)
                    self.state = 809
                    self.factor()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(ViperParser.FactorContext,0)


        def power(self):
            return self.getTypedRuleContext(ViperParser.PowerContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)




    def factor(self):

        localctx = ViperParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_factor)
        try:
            self.state = 822
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 815
                self.match(ViperParser.ADD)
                self.state = 816
                self.factor()
                pass
            elif token in [ViperParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 817
                self.match(ViperParser.MINUS)
                self.state = 818
                self.factor()
                pass
            elif token in [ViperParser.NOT_OP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 819
                self.match(ViperParser.NOT_OP)
                self.state = 820
                self.factor()
                pass
            elif token in [ViperParser.NONE, ViperParser.TRUE, ViperParser.FALSE, ViperParser.NAME, ViperParser.STRING_LITERAL, ViperParser.BYTES_LITERAL, ViperParser.DECIMAL_INTEGER, ViperParser.OCT_INTEGER, ViperParser.HEX_INTEGER, ViperParser.BIN_INTEGER, ViperParser.FLOAT_NUMBER, ViperParser.IMAG_NUMBER, ViperParser.ELLIPSIS, ViperParser.OPEN_PAREN, ViperParser.OPEN_BRACK, ViperParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 821
                self.power()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(ViperParser.AtomContext,0)


        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.TrailerContext)
            else:
                return self.getTypedRuleContext(ViperParser.TrailerContext,i)


        def factor(self):
            return self.getTypedRuleContext(ViperParser.FactorContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_power

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPower" ):
                listener.enterPower(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPower" ):
                listener.exitPower(self)




    def power(self):

        localctx = ViperParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_power)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.atom()
            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ViperParser.DOT) | (1 << ViperParser.OPEN_PAREN) | (1 << ViperParser.OPEN_BRACK))) != 0):
                self.state = 825
                self.trailer()
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.POWER:
                self.state = 831
                self.match(ViperParser.POWER)
                self.state = 832
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(ViperParser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(ViperParser.Testlist_compContext,0)


        def dictorsetmaker(self):
            return self.getTypedRuleContext(ViperParser.DictorsetmakerContext,0)


        def NAME(self):
            return self.getToken(ViperParser.NAME, 0)

        def number(self):
            return self.getTypedRuleContext(ViperParser.NumberContext,0)


        def strr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.StrrContext)
            else:
                return self.getTypedRuleContext(ViperParser.StrrContext,i)


        def NONE(self):
            return self.getToken(ViperParser.NONE, 0)

        def TRUE(self):
            return self.getToken(ViperParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(ViperParser.FALSE, 0)

        def getRuleIndex(self):
            return ViperParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)




    def atom(self):

        localctx = ViperParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 862
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 835
                self.match(ViperParser.OPEN_PAREN)
                self.state = 838
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ViperParser.YIELD]:
                    self.state = 836
                    self.yield_expr()
                    pass
                elif token in [ViperParser.LAMBDA, ViperParser.NOT, ViperParser.NONE, ViperParser.TRUE, ViperParser.FALSE, ViperParser.NAME, ViperParser.STRING_LITERAL, ViperParser.BYTES_LITERAL, ViperParser.DECIMAL_INTEGER, ViperParser.OCT_INTEGER, ViperParser.HEX_INTEGER, ViperParser.BIN_INTEGER, ViperParser.FLOAT_NUMBER, ViperParser.IMAG_NUMBER, ViperParser.ELLIPSIS, ViperParser.STAR, ViperParser.OPEN_PAREN, ViperParser.OPEN_BRACK, ViperParser.ADD, ViperParser.MINUS, ViperParser.NOT_OP, ViperParser.OPEN_BRACE]:
                    self.state = 837
                    self.testlist_comp()
                    pass
                elif token in [ViperParser.CLOSE_PAREN]:
                    pass
                else:
                    pass
                self.state = 840
                self.match(ViperParser.CLOSE_PAREN)
                pass
            elif token in [ViperParser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 841
                self.match(ViperParser.OPEN_BRACK)
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (ViperParser.LAMBDA - 20)) | (1 << (ViperParser.NOT - 20)) | (1 << (ViperParser.NONE - 20)) | (1 << (ViperParser.TRUE - 20)) | (1 << (ViperParser.FALSE - 20)) | (1 << (ViperParser.NAME - 20)) | (1 << (ViperParser.STRING_LITERAL - 20)) | (1 << (ViperParser.BYTES_LITERAL - 20)) | (1 << (ViperParser.DECIMAL_INTEGER - 20)) | (1 << (ViperParser.OCT_INTEGER - 20)) | (1 << (ViperParser.HEX_INTEGER - 20)) | (1 << (ViperParser.BIN_INTEGER - 20)) | (1 << (ViperParser.FLOAT_NUMBER - 20)) | (1 << (ViperParser.IMAG_NUMBER - 20)) | (1 << (ViperParser.ELLIPSIS - 20)) | (1 << (ViperParser.STAR - 20)) | (1 << (ViperParser.OPEN_PAREN - 20)) | (1 << (ViperParser.OPEN_BRACK - 20)) | (1 << (ViperParser.ADD - 20)) | (1 << (ViperParser.MINUS - 20)) | (1 << (ViperParser.NOT_OP - 20)) | (1 << (ViperParser.OPEN_BRACE - 20)))) != 0):
                    self.state = 842
                    self.testlist_comp()


                self.state = 845
                self.match(ViperParser.CLOSE_BRACK)
                pass
            elif token in [ViperParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 846
                self.match(ViperParser.OPEN_BRACE)
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (ViperParser.LAMBDA - 20)) | (1 << (ViperParser.NOT - 20)) | (1 << (ViperParser.NONE - 20)) | (1 << (ViperParser.TRUE - 20)) | (1 << (ViperParser.FALSE - 20)) | (1 << (ViperParser.NAME - 20)) | (1 << (ViperParser.STRING_LITERAL - 20)) | (1 << (ViperParser.BYTES_LITERAL - 20)) | (1 << (ViperParser.DECIMAL_INTEGER - 20)) | (1 << (ViperParser.OCT_INTEGER - 20)) | (1 << (ViperParser.HEX_INTEGER - 20)) | (1 << (ViperParser.BIN_INTEGER - 20)) | (1 << (ViperParser.FLOAT_NUMBER - 20)) | (1 << (ViperParser.IMAG_NUMBER - 20)) | (1 << (ViperParser.ELLIPSIS - 20)) | (1 << (ViperParser.STAR - 20)) | (1 << (ViperParser.OPEN_PAREN - 20)) | (1 << (ViperParser.OPEN_BRACK - 20)) | (1 << (ViperParser.ADD - 20)) | (1 << (ViperParser.MINUS - 20)) | (1 << (ViperParser.NOT_OP - 20)) | (1 << (ViperParser.OPEN_BRACE - 20)))) != 0):
                    self.state = 847
                    self.dictorsetmaker()


                self.state = 850
                self.match(ViperParser.CLOSE_BRACE)
                pass
            elif token in [ViperParser.NAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 851
                self.match(ViperParser.NAME)
                pass
            elif token in [ViperParser.DECIMAL_INTEGER, ViperParser.OCT_INTEGER, ViperParser.HEX_INTEGER, ViperParser.BIN_INTEGER, ViperParser.FLOAT_NUMBER, ViperParser.IMAG_NUMBER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 852
                self.number()
                pass
            elif token in [ViperParser.STRING_LITERAL, ViperParser.BYTES_LITERAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 854 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 853
                    self.strr()
                    self.state = 856 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==ViperParser.STRING_LITERAL or _la==ViperParser.BYTES_LITERAL):
                        break

                pass
            elif token in [ViperParser.ELLIPSIS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 858
                self.match(ViperParser.ELLIPSIS)
                pass
            elif token in [ViperParser.NONE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 859
                self.match(ViperParser.NONE)
                pass
            elif token in [ViperParser.TRUE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 860
                self.match(ViperParser.TRUE)
                pass
            elif token in [ViperParser.FALSE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 861
                self.match(ViperParser.FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_compContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.TestContext)
            else:
                return self.getTypedRuleContext(ViperParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(ViperParser.Comp_forContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)




    def testlist_comp(self):

        localctx = ViperParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.test()
            self.state = 876
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.FOR]:
                self.state = 865
                self.comp_for()
                pass
            elif token in [ViperParser.CLOSE_PAREN, ViperParser.COMMA, ViperParser.CLOSE_BRACK]:
                self.state = 870
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 866
                        self.match(ViperParser.COMMA)
                        self.state = 867
                        self.test() 
                    self.state = 872
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ViperParser.COMMA:
                    self.state = 873
                    self.match(ViperParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arglist(self):
            return self.getTypedRuleContext(ViperParser.ArglistContext,0)


        def subscriptlist(self):
            return self.getTypedRuleContext(ViperParser.SubscriptlistContext,0)


        def NAME(self):
            return self.getToken(ViperParser.NAME, 0)

        def getRuleIndex(self):
            return ViperParser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)




    def trailer(self):

        localctx = ViperParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 889
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 878
                self.match(ViperParser.OPEN_PAREN)
                self.state = 880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (ViperParser.LAMBDA - 20)) | (1 << (ViperParser.NOT - 20)) | (1 << (ViperParser.NONE - 20)) | (1 << (ViperParser.TRUE - 20)) | (1 << (ViperParser.FALSE - 20)) | (1 << (ViperParser.NAME - 20)) | (1 << (ViperParser.STRING_LITERAL - 20)) | (1 << (ViperParser.BYTES_LITERAL - 20)) | (1 << (ViperParser.DECIMAL_INTEGER - 20)) | (1 << (ViperParser.OCT_INTEGER - 20)) | (1 << (ViperParser.HEX_INTEGER - 20)) | (1 << (ViperParser.BIN_INTEGER - 20)) | (1 << (ViperParser.FLOAT_NUMBER - 20)) | (1 << (ViperParser.IMAG_NUMBER - 20)) | (1 << (ViperParser.ELLIPSIS - 20)) | (1 << (ViperParser.STAR - 20)) | (1 << (ViperParser.OPEN_PAREN - 20)) | (1 << (ViperParser.POWER - 20)) | (1 << (ViperParser.OPEN_BRACK - 20)) | (1 << (ViperParser.ADD - 20)) | (1 << (ViperParser.MINUS - 20)) | (1 << (ViperParser.NOT_OP - 20)) | (1 << (ViperParser.OPEN_BRACE - 20)))) != 0):
                    self.state = 879
                    self.arglist()


                self.state = 882
                self.match(ViperParser.CLOSE_PAREN)
                pass
            elif token in [ViperParser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 883
                self.match(ViperParser.OPEN_BRACK)
                self.state = 884
                self.subscriptlist()
                self.state = 885
                self.match(ViperParser.CLOSE_BRACK)
                pass
            elif token in [ViperParser.DOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 887
                self.match(ViperParser.DOT)
                self.state = 888
                self.match(ViperParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(ViperParser.SubscriptContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)




    def subscriptlist(self):

        localctx = ViperParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.subscript()
            self.state = 896
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 892
                    self.match(ViperParser.COMMA)
                    self.state = 893
                    self.subscript() 
                self.state = 898
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.COMMA:
                self.state = 899
                self.match(ViperParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.TestContext)
            else:
                return self.getTypedRuleContext(ViperParser.TestContext,i)


        def sliceop(self):
            return self.getTypedRuleContext(ViperParser.SliceopContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)




    def subscript(self):

        localctx = ViperParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 902
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (ViperParser.LAMBDA - 20)) | (1 << (ViperParser.NOT - 20)) | (1 << (ViperParser.NONE - 20)) | (1 << (ViperParser.TRUE - 20)) | (1 << (ViperParser.FALSE - 20)) | (1 << (ViperParser.NAME - 20)) | (1 << (ViperParser.STRING_LITERAL - 20)) | (1 << (ViperParser.BYTES_LITERAL - 20)) | (1 << (ViperParser.DECIMAL_INTEGER - 20)) | (1 << (ViperParser.OCT_INTEGER - 20)) | (1 << (ViperParser.HEX_INTEGER - 20)) | (1 << (ViperParser.BIN_INTEGER - 20)) | (1 << (ViperParser.FLOAT_NUMBER - 20)) | (1 << (ViperParser.IMAG_NUMBER - 20)) | (1 << (ViperParser.ELLIPSIS - 20)) | (1 << (ViperParser.STAR - 20)) | (1 << (ViperParser.OPEN_PAREN - 20)) | (1 << (ViperParser.OPEN_BRACK - 20)) | (1 << (ViperParser.ADD - 20)) | (1 << (ViperParser.MINUS - 20)) | (1 << (ViperParser.NOT_OP - 20)) | (1 << (ViperParser.OPEN_BRACE - 20)))) != 0):
                    self.state = 903
                    self.test()


                self.state = 906
                self.match(ViperParser.COLON)
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (ViperParser.LAMBDA - 20)) | (1 << (ViperParser.NOT - 20)) | (1 << (ViperParser.NONE - 20)) | (1 << (ViperParser.TRUE - 20)) | (1 << (ViperParser.FALSE - 20)) | (1 << (ViperParser.NAME - 20)) | (1 << (ViperParser.STRING_LITERAL - 20)) | (1 << (ViperParser.BYTES_LITERAL - 20)) | (1 << (ViperParser.DECIMAL_INTEGER - 20)) | (1 << (ViperParser.OCT_INTEGER - 20)) | (1 << (ViperParser.HEX_INTEGER - 20)) | (1 << (ViperParser.BIN_INTEGER - 20)) | (1 << (ViperParser.FLOAT_NUMBER - 20)) | (1 << (ViperParser.IMAG_NUMBER - 20)) | (1 << (ViperParser.ELLIPSIS - 20)) | (1 << (ViperParser.STAR - 20)) | (1 << (ViperParser.OPEN_PAREN - 20)) | (1 << (ViperParser.OPEN_BRACK - 20)) | (1 << (ViperParser.ADD - 20)) | (1 << (ViperParser.MINUS - 20)) | (1 << (ViperParser.NOT_OP - 20)) | (1 << (ViperParser.OPEN_BRACE - 20)))) != 0):
                    self.state = 907
                    self.test()


                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ViperParser.COLON:
                    self.state = 910
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(ViperParser.TestContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)




    def sliceop(self):

        localctx = ViperParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.match(ViperParser.COLON)
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (ViperParser.LAMBDA - 20)) | (1 << (ViperParser.NOT - 20)) | (1 << (ViperParser.NONE - 20)) | (1 << (ViperParser.TRUE - 20)) | (1 << (ViperParser.FALSE - 20)) | (1 << (ViperParser.NAME - 20)) | (1 << (ViperParser.STRING_LITERAL - 20)) | (1 << (ViperParser.BYTES_LITERAL - 20)) | (1 << (ViperParser.DECIMAL_INTEGER - 20)) | (1 << (ViperParser.OCT_INTEGER - 20)) | (1 << (ViperParser.HEX_INTEGER - 20)) | (1 << (ViperParser.BIN_INTEGER - 20)) | (1 << (ViperParser.FLOAT_NUMBER - 20)) | (1 << (ViperParser.IMAG_NUMBER - 20)) | (1 << (ViperParser.ELLIPSIS - 20)) | (1 << (ViperParser.STAR - 20)) | (1 << (ViperParser.OPEN_PAREN - 20)) | (1 << (ViperParser.OPEN_BRACK - 20)) | (1 << (ViperParser.ADD - 20)) | (1 << (ViperParser.MINUS - 20)) | (1 << (ViperParser.NOT_OP - 20)) | (1 << (ViperParser.OPEN_BRACE - 20)))) != 0):
                self.state = 916
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(ViperParser.Star_exprContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)




    def exprlist(self):

        localctx = ViperParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.star_expr()
            self.state = 924
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 920
                    self.match(ViperParser.COMMA)
                    self.state = 921
                    self.star_expr() 
                self.state = 926
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

            self.state = 928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.COMMA:
                self.state = 927
                self.match(ViperParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.TestContext)
            else:
                return self.getTypedRuleContext(ViperParser.TestContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)




    def testlist(self):

        localctx = ViperParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.test()
            self.state = 935
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 931
                    self.match(ViperParser.COMMA)
                    self.state = 932
                    self.test() 
                self.state = 937
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

            self.state = 939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.COMMA:
                self.state = 938
                self.match(ViperParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictorsetmakerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.TestContext)
            else:
                return self.getTypedRuleContext(ViperParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(ViperParser.Comp_forContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)




    def dictorsetmaker(self):

        localctx = ViperParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.state = 974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 941
                self.test()
                self.state = 942
                self.match(ViperParser.COLON)
                self.state = 943
                self.test()
                self.state = 958
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ViperParser.FOR]:
                    self.state = 944
                    self.comp_for()
                    pass
                elif token in [ViperParser.COMMA, ViperParser.CLOSE_BRACE]:
                    self.state = 952
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 945
                            self.match(ViperParser.COMMA)
                            self.state = 946
                            self.test()
                            self.state = 947
                            self.match(ViperParser.COLON)
                            self.state = 948
                            self.test() 
                        self.state = 954
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

                    self.state = 956
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ViperParser.COMMA:
                        self.state = 955
                        self.match(ViperParser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 960
                self.test()
                self.state = 972
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ViperParser.FOR]:
                    self.state = 961
                    self.comp_for()
                    pass
                elif token in [ViperParser.COMMA, ViperParser.CLOSE_BRACE]:
                    self.state = 966
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 962
                            self.match(ViperParser.COMMA)
                            self.state = 963
                            self.test() 
                        self.state = 968
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

                    self.state = 970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ViperParser.COMMA:
                        self.state = 969
                        self.match(ViperParser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(ViperParser.CLASS, 0)

        def NAME(self):
            return self.getToken(ViperParser.NAME, 0)

        def suite(self):
            return self.getTypedRuleContext(ViperParser.SuiteContext,0)


        def arglist(self):
            return self.getTypedRuleContext(ViperParser.ArglistContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)




    def classdef(self):

        localctx = ViperParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.match(ViperParser.CLASS)
            self.state = 977
            self.match(ViperParser.NAME)
            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.OPEN_PAREN:
                self.state = 978
                self.match(ViperParser.OPEN_PAREN)
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (ViperParser.LAMBDA - 20)) | (1 << (ViperParser.NOT - 20)) | (1 << (ViperParser.NONE - 20)) | (1 << (ViperParser.TRUE - 20)) | (1 << (ViperParser.FALSE - 20)) | (1 << (ViperParser.NAME - 20)) | (1 << (ViperParser.STRING_LITERAL - 20)) | (1 << (ViperParser.BYTES_LITERAL - 20)) | (1 << (ViperParser.DECIMAL_INTEGER - 20)) | (1 << (ViperParser.OCT_INTEGER - 20)) | (1 << (ViperParser.HEX_INTEGER - 20)) | (1 << (ViperParser.BIN_INTEGER - 20)) | (1 << (ViperParser.FLOAT_NUMBER - 20)) | (1 << (ViperParser.IMAG_NUMBER - 20)) | (1 << (ViperParser.ELLIPSIS - 20)) | (1 << (ViperParser.STAR - 20)) | (1 << (ViperParser.OPEN_PAREN - 20)) | (1 << (ViperParser.POWER - 20)) | (1 << (ViperParser.OPEN_BRACK - 20)) | (1 << (ViperParser.ADD - 20)) | (1 << (ViperParser.MINUS - 20)) | (1 << (ViperParser.NOT_OP - 20)) | (1 << (ViperParser.OPEN_BRACE - 20)))) != 0):
                    self.state = 979
                    self.arglist()


                self.state = 982
                self.match(ViperParser.CLOSE_PAREN)


            self.state = 985
            self.match(ViperParser.COLON)
            self.state = 986
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(ViperParser.ArgumentContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.TestContext)
            else:
                return self.getTypedRuleContext(ViperParser.TestContext,i)


        def getRuleIndex(self):
            return ViperParser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)




    def arglist(self):

        localctx = ViperParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 988
                    self.argument()
                    self.state = 989
                    self.match(ViperParser.COMMA) 
                self.state = 995
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

            self.state = 1016
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 996
                self.argument()
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ViperParser.COMMA:
                    self.state = 997
                    self.match(ViperParser.COMMA)


                pass

            elif la_ == 2:
                self.state = 1000
                self.match(ViperParser.STAR)
                self.state = 1001
                self.test()
                self.state = 1006
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1002
                        self.match(ViperParser.COMMA)
                        self.state = 1003
                        self.argument() 
                    self.state = 1008
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

                self.state = 1012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ViperParser.COMMA:
                    self.state = 1009
                    self.match(ViperParser.COMMA)
                    self.state = 1010
                    self.match(ViperParser.POWER)
                    self.state = 1011
                    self.test()


                pass

            elif la_ == 3:
                self.state = 1014
                self.match(ViperParser.POWER)
                self.state = 1015
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ViperParser.TestContext)
            else:
                return self.getTypedRuleContext(ViperParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(ViperParser.Comp_forContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = ViperParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 1026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1018
                self.test()
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ViperParser.FOR:
                    self.state = 1019
                    self.comp_for()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1022
                self.test()
                self.state = 1023
                self.match(ViperParser.ASSIGN)
                self.state = 1024
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_iterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(ViperParser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(ViperParser.Comp_ifContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)




    def comp_iter(self):

        localctx = ViperParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_comp_iter)
        try:
            self.state = 1030
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1028
                self.comp_for()
                pass
            elif token in [ViperParser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1029
                self.comp_if()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_forContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(ViperParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(ViperParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(ViperParser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(ViperParser.Or_testContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(ViperParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)




    def comp_for(self):

        localctx = ViperParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(ViperParser.FOR)
            self.state = 1033
            self.exprlist()
            self.state = 1034
            self.match(ViperParser.IN)
            self.state = 1035
            self.or_test()
            self.state = 1037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.IF or _la==ViperParser.FOR:
                self.state = 1036
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ViperParser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(ViperParser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(ViperParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_comp_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_if" ):
                listener.enterComp_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_if" ):
                listener.exitComp_if(self)




    def comp_if(self):

        localctx = ViperParser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(ViperParser.IF)
            self.state = 1040
            self.test_nocond()
            self.state = 1042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ViperParser.IF or _la==ViperParser.FOR:
                self.state = 1041
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(ViperParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(ViperParser.Yield_argContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)




    def yield_expr(self):

        localctx = ViperParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.match(ViperParser.YIELD)
            self.state = 1046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (ViperParser.FROM - 4)) | (1 << (ViperParser.LAMBDA - 4)) | (1 << (ViperParser.NOT - 4)) | (1 << (ViperParser.NONE - 4)) | (1 << (ViperParser.TRUE - 4)) | (1 << (ViperParser.FALSE - 4)) | (1 << (ViperParser.NAME - 4)) | (1 << (ViperParser.STRING_LITERAL - 4)) | (1 << (ViperParser.BYTES_LITERAL - 4)) | (1 << (ViperParser.DECIMAL_INTEGER - 4)) | (1 << (ViperParser.OCT_INTEGER - 4)) | (1 << (ViperParser.HEX_INTEGER - 4)) | (1 << (ViperParser.BIN_INTEGER - 4)) | (1 << (ViperParser.FLOAT_NUMBER - 4)) | (1 << (ViperParser.IMAG_NUMBER - 4)) | (1 << (ViperParser.ELLIPSIS - 4)) | (1 << (ViperParser.STAR - 4)) | (1 << (ViperParser.OPEN_PAREN - 4)) | (1 << (ViperParser.OPEN_BRACK - 4)) | (1 << (ViperParser.ADD - 4)) | (1 << (ViperParser.MINUS - 4)) | (1 << (ViperParser.NOT_OP - 4)) | (1 << (ViperParser.OPEN_BRACE - 4)))) != 0):
                self.state = 1045
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(ViperParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(ViperParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(ViperParser.TestlistContext,0)


        def getRuleIndex(self):
            return ViperParser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)




    def yield_arg(self):

        localctx = ViperParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_yield_arg)
        try:
            self.state = 1051
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.match(ViperParser.FROM)
                self.state = 1049
                self.test()
                pass
            elif token in [ViperParser.LAMBDA, ViperParser.NOT, ViperParser.NONE, ViperParser.TRUE, ViperParser.FALSE, ViperParser.NAME, ViperParser.STRING_LITERAL, ViperParser.BYTES_LITERAL, ViperParser.DECIMAL_INTEGER, ViperParser.OCT_INTEGER, ViperParser.HEX_INTEGER, ViperParser.BIN_INTEGER, ViperParser.FLOAT_NUMBER, ViperParser.IMAG_NUMBER, ViperParser.ELLIPSIS, ViperParser.STAR, ViperParser.OPEN_PAREN, ViperParser.OPEN_BRACK, ViperParser.ADD, ViperParser.MINUS, ViperParser.NOT_OP, ViperParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1050
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StrrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(ViperParser.STRING_LITERAL, 0)

        def BYTES_LITERAL(self):
            return self.getToken(ViperParser.BYTES_LITERAL, 0)

        def getRuleIndex(self):
            return ViperParser.RULE_strr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrr" ):
                listener.enterStrr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrr" ):
                listener.exitStrr(self)




    def strr(self):

        localctx = ViperParser.StrrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_strr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            _la = self._input.LA(1)
            if not(_la==ViperParser.STRING_LITERAL or _la==ViperParser.BYTES_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(ViperParser.IntegerContext,0)


        def FLOAT_NUMBER(self):
            return self.getToken(ViperParser.FLOAT_NUMBER, 0)

        def IMAG_NUMBER(self):
            return self.getToken(ViperParser.IMAG_NUMBER, 0)

        def getRuleIndex(self):
            return ViperParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = ViperParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_number)
        try:
            self.state = 1058
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ViperParser.DECIMAL_INTEGER, ViperParser.OCT_INTEGER, ViperParser.HEX_INTEGER, ViperParser.BIN_INTEGER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1055
                self.integer()
                pass
            elif token in [ViperParser.FLOAT_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1056
                self.match(ViperParser.FLOAT_NUMBER)
                pass
            elif token in [ViperParser.IMAG_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1057
                self.match(ViperParser.IMAG_NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(ViperParser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(ViperParser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(ViperParser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(ViperParser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return ViperParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)




    def integer(self):

        localctx = ViperParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ViperParser.DECIMAL_INTEGER) | (1 << ViperParser.OCT_INTEGER) | (1 << ViperParser.HEX_INTEGER) | (1 << ViperParser.BIN_INTEGER))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





